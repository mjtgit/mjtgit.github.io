<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac 终端 oh-my-zsh 配置</title>
    <url>/2020/04/10/Mac-%E7%BB%88%E7%AB%AF-oh-my-zsh-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Mac 终端默认 shell 为 bash。<br>但zsh相比bash好用很多，下面介绍使用zsh 以及 oh-my-zsh 的配置。</p>
</blockquote>
<span id="more"></span>

<h2 id="查看shell"><a href="#查看shell" class="headerlink" title="查看shell"></a>查看shell</h2><h4 id="查看当前使用的-shell"><a href="#查看当前使用的-shell" class="headerlink" title="查看当前使用的 shell"></a>查看当前使用的 shell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="查看安装的-shell"><a href="#查看安装的-shell" class="headerlink" title="查看安装的 shell"></a>查看安装的 shell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>
<h4 id="使用-brew-更新-zsh"><a href="#使用-brew-更新-zsh" class="headerlink" title="使用 brew 更新 zsh"></a>使用 brew 更新 zsh</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/zsh-5.5.1.high_sierra.bottle.tar.gz</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring zsh-5.5.1.high_sierra.bottle.tar.gz</span><br><span class="line">/usr/local/Cellar/zsh/5.5.1: 1,444 files, 12MB</span><br></pre></td></tr></table></figure>
<h4 id="切换为-zsh"><a href="#切换为-zsh" class="headerlink" title="切换为 zsh"></a>切换为 zsh</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h4 id="注意：重启终端即可使用-zsh"><a href="#注意：重启终端即可使用-zsh" class="headerlink" title="注意：重启终端即可使用 zsh"></a>注意：重启终端即可使用 zsh</h4><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="执行从-oh-my-zsh-的-GitHub-下载的安装脚本"><a href="#执行从-oh-my-zsh-的-GitHub-下载的安装脚本" class="headerlink" title="执行从 oh-my-zsh 的 GitHub 下载的安装脚本"></a>执行从 oh-my-zsh 的 GitHub 下载的安装脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line"></span><br><span class="line">  ____  / /_     ____ ___  __  __   ____  _____/ /_</span><br><span class="line"> / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</span><br><span class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span><br><span class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</span><br><span class="line">                        /____/                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</span><br></pre></td></tr></table></figure>
<h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><h4 id="在-x2F-zshrc文件中找到plugins项，修改如下："><a href="#在-x2F-zshrc文件中找到plugins项，修改如下：" class="headerlink" title="在~&#x2F;.zshrc文件中找到plugins项，修改如下："></a>在~&#x2F;.zshrc文件中找到plugins项，修改如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(git colored-man colorize pip python brew osx zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure>
<h4 id="更多的设置参考oh-my-zsh-wiki-Plugins"><a href="#更多的设置参考oh-my-zsh-wiki-Plugins" class="headerlink" title="更多的设置参考oh-my-zsh wiki-Plugins"></a>更多的设置参考<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">oh-my-zsh wiki-Plugins</a></h4><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="就是更改-zshrc的内容，下面的是常用的一些配置。（-zshrc是在根目录下，可用vim编辑或者直接vsc-zshrc-直接用vscode打开修改）"><a href="#就是更改-zshrc的内容，下面的是常用的一些配置。（-zshrc是在根目录下，可用vim编辑或者直接vsc-zshrc-直接用vscode打开修改）" class="headerlink" title="就是更改.zshrc的内容，下面的是常用的一些配置。（.zshrc是在根目录下，可用vim编辑或者直接vsc .zshrc 直接用vscode打开修改）"></a>就是更改.zshrc的内容，下面的是常用的一些配置。（.zshrc是在根目录下，可用vim编辑或者直接vsc .zshrc 直接用vscode打开修改）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">plugins=(zsh-256color you-should-use git z sudo zsh-autosuggestions)</span><br><span class="line">//几个插件：256色终端，简写命令自动题型，git命令增强，全局跳转，快速添加 sudo，自动补全命令</span><br><span class="line"></span><br><span class="line">// 下面是各种快捷键</span><br><span class="line">alias zshrc=&quot;open ~/.zshrc&quot;</span><br><span class="line">alias vsc=&#x27;open -a &quot;visual studio code&quot;&#x27;</span><br><span class="line">alias sub=&#x27;open -a &quot;sublime text&quot;&#x27;</span><br><span class="line">alias ip=&quot;ifconfig en0 inet | grep inet | awk &#x27;&#123; print \$2 &#125;&#x27;&quot;</span><br><span class="line">alias ll=&#x27;ls -l&#x27;</span><br><span class="line">alias la=&#x27;ls -a&#x27;</span><br><span class="line">alias runvps=&quot;sudo ./client_darwin_386 -l 127.0.0.1:443 -r 104.194.78.93:29900 -mode fast2 -key &#x27;111111&#x27;&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>Mac</tag>
        <tag>oh-my-zsh</tag>
        <tag>.zshrc</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用tree生成目录结构</title>
    <url>/2019/08/06/Mac%E4%BD%BF%E7%94%A8tree%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="Mac使用tree生成目录结构"><a href="#Mac使用tree生成目录结构" class="headerlink" title="Mac使用tree生成目录结构"></a>Mac使用tree生成目录结构</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>程序员经常会有需求，需要列出项目的结构树。Mac或者Linux下可以使用tree列出项目结构，如下图这种：</p>
<blockquote>
<p>tree examples</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">examples</span><br><span class="line">└── example.js</span><br></pre></td></tr></table></figure>
<h4 id="使用起来也非常简单。"><a href="#使用起来也非常简单。" class="headerlink" title="使用起来也非常简单。"></a>使用起来也非常简单。</h4><h4 id="Mac下可以使用brew-install-tree进行安装。安装后，在terminal中输入tree-a便可以查看某个文件夹下的所有文件。"><a href="#Mac下可以使用brew-install-tree进行安装。安装后，在terminal中输入tree-a便可以查看某个文件夹下的所有文件。" class="headerlink" title="Mac下可以使用brew install tree进行安装。安装后，在terminal中输入tree -a便可以查看某个文件夹下的所有文件。"></a>Mac下可以使用brew install tree进行安装。安装后，在terminal中输入tree -a便可以查看某个文件夹下的所有文件。</h4><span id="more"></span>

<h4 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -d 只显示文件夹；</span><br><span class="line">tree -L n 显示项目的层级。n表示层级数。比如想要显示项目三层结构，可以用tree -l 3；</span><br><span class="line">tree -I pattern 用于过滤不想要显示的文件或者文件夹。比如你想要过滤项目中的node_modules文件夹，可以使用tree -I &quot;node_modules&quot;；</span><br><span class="line">tree &gt; tree.md 将项目结构输出到tree.md这个文件。</span><br></pre></td></tr></table></figure>
<h4 id="举个例子，如果我们要显示某个项目下3层的所有文件结构-同时又过滤node-modules文件夹-最后输出到tree-md可以这么写"><a href="#举个例子，如果我们要显示某个项目下3层的所有文件结构-同时又过滤node-modules文件夹-最后输出到tree-md可以这么写" class="headerlink" title="举个例子，如果我们要显示某个项目下3层的所有文件结构,同时又过滤node_modules文件夹,最后输出到tree.md可以这么写"></a>举个例子，如果我们要显示某个项目下3层的所有文件结构,同时又过滤node_modules文件夹,最后输出到tree.md可以这么写</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L 3 -I &quot;node_modules&quot;</span><br></pre></td></tr></table></figure>
<h4 id="结果为："><a href="#结果为：" class="headerlink" title="结果为："></a>结果为：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   ├── build.js</span><br><span class="line">│   ├── check-versions.js</span><br><span class="line">│   ├── dev-client.js</span><br><span class="line">│   ├── dev-server.js</span><br><span class="line">│   ├── utils.js</span><br><span class="line">│   ├── webpack.base.conf.js</span><br><span class="line">│   ├── webpack.dev.conf.js</span><br><span class="line">│   └── webpack.prod.conf.js</span><br><span class="line">├── config</span><br><span class="line">│   ├── dev.env.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── prod.env.js</span><br><span class="line">├── docs</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── git.sh</span><br><span class="line">├── index.html</span><br><span class="line">├── npm-debug.log</span><br><span class="line">├── open</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── list.scss</span><br><span class="line">│   │   ├── logo.png</span><br><span class="line">│   │   ├── search-btn.png</span><br><span class="line">│   │   └── style.scss</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── Hello.vue</span><br><span class="line">│   │   ├── Spinner.vue</span><br><span class="line">│   │   └── header.vue</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   ├── router.js</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   ├── api.js</span><br><span class="line">│   │   ├── modules</span><br><span class="line">│   │   ├── store.js</span><br><span class="line">│   │   └── types.js</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       ├── index.vue</span><br><span class="line">│       ├── movie</span><br><span class="line">│       └── vuex-demo.vue</span><br><span class="line">├── static</span><br><span class="line">└── tree.md</span><br></pre></td></tr></table></figure>
<h4 id="更多命令的使用可以查看tree-–help。"><a href="#更多命令的使用可以查看tree-–help。" class="headerlink" title="更多命令的使用可以查看tree –help。"></a>更多命令的使用可以查看tree –help。</h4>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>git 指令总结</title>
    <url>/2017/11/26/git-use/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>&amp;ensp;&amp;ensp;git指令总结</p>
</blockquote>
<h5 id="本地-有内容-和远程-有内容-关联"><a href="#本地-有内容-和远程-有内容-关联" class="headerlink" title="本地(有内容)和远程(有内容)关联"></a>本地(有内容)和远程(有内容)关联</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# 仓库名&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:coderliaoyajun/仓库名.git</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="本地-无内容-和远程-无内容-关联"><a href="#本地-无内容-和远程-无内容-关联" class="headerlink" title="本地(无内容)和远程(无内容)关联"></a>本地(无内容)和远程(无内容)关联</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# 仓库名&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:coderliaoyajun/仓库名.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地-有内容-和远程-无内容-关联"><a href="#本地-有内容-和远程-无内容-关联" class="headerlink" title="本地(有内容)和远程(无内容)关联"></a>本地(有内容)和远程(无内容)关联</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:coderliaoyajun/仓库名.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地-无内容-和远程-有内容-关联"><a href="#本地-无内容-和远程-有内容-关联" class="headerlink" title="本地(无内容)和远程(有内容)关联"></a>本地(无内容)和远程(有内容)关联</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:coderliaoyajun/仓库名.git 仓库名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="获取远程仓库分支（只是刷新远程分支）"><a href="#获取远程仓库分支（只是刷新远程分支）" class="headerlink" title="获取远程仓库分支（只是刷新远程分支）"></a>获取远程仓库分支（只是刷新远程分支）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地新建dev分支并切换到dev分支"><a href="#本地新建dev分支并切换到dev分支" class="headerlink" title="本地新建dev分支并切换到dev分支"></a>本地新建dev分支并切换到dev分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地新建dev分支并切换到dev分支并同步远程的dev分支到这个分支"><a href="#本地新建dev分支并切换到dev分支并同步远程的dev分支到这个分支" class="headerlink" title="本地新建dev分支并切换到dev分支并同步远程的dev分支到这个分支"></a>本地新建dev分支并切换到dev分支并同步远程的dev分支到这个分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地新建分支"><a href="#本地新建分支" class="headerlink" title="本地新建分支"></a>本地新建分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="将新分支发布在github上"><a href="#将新分支发布在github上" class="headerlink" title="将新分支发布在github上"></a>将新分支发布在github上</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="本地删除分支"><a href="#本地删除分支" class="headerlink" title="本地删除分支"></a>本地删除分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="远程端删除分支"><a href="#远程端删除分支" class="headerlink" title="远程端删除分支"></a>远程端删除分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :dev   (分支名前的冒号代表删除)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="合并dev分支到当前分支"><a href="#合并dev分支到当前分支" class="headerlink" title="合并dev分支到当前分支"></a>合并dev分支到当前分支</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="撤销为保存到本地仓库的修改"><a href="#撤销为保存到本地仓库的修改" class="headerlink" title="撤销为保存到本地仓库的修改"></a>撤销为保存到本地仓库的修改</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout assets/page/m/wechatredbag/wechatredbag.twig</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="关联多个仓库"><a href="#关联多个仓库" class="headerlink" title="关联多个仓库"></a>关联多个仓库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add upstream git@gitlab.octinn.com:server/mobile.git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="解决-gitignore不生效"><a href="#解决-gitignore不生效" class="headerlink" title="解决.gitignore不生效"></a>解决.gitignore不生效</h5><h6 id="gitignore文件只会在第一次提交项目的时候写入缓存，如果第一次提交项目时候忘记添加-gitignore文件，后来再补上是没有用的，-gitignore文件是不生效的。因为在缓存中已经标记该项目是不存在ignore文件的。"><a href="#gitignore文件只会在第一次提交项目的时候写入缓存，如果第一次提交项目时候忘记添加-gitignore文件，后来再补上是没有用的，-gitignore文件是不生效的。因为在缓存中已经标记该项目是不存在ignore文件的。" class="headerlink" title=".gitignore文件只会在第一次提交项目的时候写入缓存，如果第一次提交项目时候忘记添加.gitignore文件，后来再补上是没有用的，.gitignore文件是不生效的。因为在缓存中已经标记该项目是不存在ignore文件的。"></a>.gitignore文件只会在第一次提交项目的时候写入缓存，如果第一次提交项目时候忘记添加.gitignore文件，后来再补上是没有用的，.gitignore文件是不生效的。因为在缓存中已经标记该项目是不存在ignore文件的。</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用git清除本地缓存，然后提交。命令如下：</span><br><span class="line">git rm -r --cached .             # 删除缓存</span><br><span class="line">git add -A                       # 重新添加所有文件，等价写法：git add .</span><br><span class="line">git commit -m &quot;update&quot;          # 重新提交</span><br><span class="line">git push -u origin master       # 推送</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git 服务器实践-周鹏</title>
    <url>/2019/05/23/git-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E8%B7%B5-%E5%91%A8%E9%B9%8F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p> 我使用的服务器是搬瓦工的vps，操作系统为centos7下面是操作过程（以下均以为您的服务器已安装ssh所有操作都是在root用户下进行的）:</p>
</blockquote>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>
<h3 id="为操作系统添加用户和工作组，用户名和工作组就统一用git吧"><a href="#为操作系统添加用户和工作组，用户名和工作组就统一用git吧" class="headerlink" title="为操作系统添加用户和工作组，用户名和工作组就统一用git吧"></a>为操作系统添加用户和工作组，用户名和工作组就统一用git吧</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd git //添加git组</span><br><span class="line">useradd -g git git //新建git用户并添加到git组</span><br><span class="line">passwd git //为git用户设置密码</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="创建证书登录文件用来放置用户的公钥"><a href="#创建证书登录文件用来放置用户的公钥" class="headerlink" title="创建证书登录文件用来放置用户的公钥"></a>创建证书登录文件用来放置用户的公钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/git //git用户所在的目录</span><br><span class="line">mkdir .ssh //如果没有.ssh文件夹就创建它</span><br><span class="line">touch .ssh/authorized_keys //创建这个文件用来存公钥</span><br><span class="line">chown git .ssh/authorized_keys //将文件的拥有者改为git</span><br><span class="line">chmod 600 .ssh/authorized_keys //赋予拥有者以最大权限</span><br></pre></td></tr></table></figure>
<h3 id="创建git仓库目录"><a href="#创建git仓库目录" class="headerlink" title="创建git仓库目录"></a>创建git仓库目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/gitrepo //创建存放git仓库的目录</span><br><span class="line">chown -R git /home/gitrepo //将文件夹的拥有者改为git因为普通用户没有权限在其home目录外创建文件</span><br><span class="line">cd /home/gitrepo //进入该目录</span><br><span class="line">git init --bare myProject.git //创建名为myProject的git裸仓库（没有工作去文件只有commit）</span><br><span class="line">chown git myProject.git //修改拥有者</span><br></pre></td></tr></table></figure>
<h3 id="现在已经可以克隆仓库了"><a href="#现在已经可以克隆仓库了" class="headerlink" title="现在已经可以克隆仓库了"></a>现在已经可以克隆仓库了</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@yourserver:/home/gitrepo/myProject.git</span><br><span class="line">//这里有必要解释一下 git clone 命令默认是ssh协议操作而ssh协议的默认端口是22建议用默认的22免得折腾搬瓦工默认修改了端口号可以自行去改回来</span><br><span class="line">//该命令的完全形式为：git clone ssh://username@yourServer:Port/home/gitrepo/myProject.git</span><br><span class="line">//自定义ssh端口：</span><br><span class="line">vi /etc/ssh/sshd_config //将其中的port 修改为你想要的端口号即可</span><br></pre></td></tr></table></figure>
<h3 id="每次克隆都要输入git用户的密码很不爽？"><a href="#每次克隆都要输入git用户的密码很不爽？" class="headerlink" title="每次克隆都要输入git用户的密码很不爽？"></a>每次克隆都要输入git用户的密码很不爽？</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub | ssh git@yourServer &#x27;cat - &gt;&gt; /home/git/.ssh/authorized_keys&#x27;</span><br><span class="line">//使用这条命令可以将本地的公钥填入到主机的ssh验证文件内这样就使得本机克隆代码时不用再输入密码了。</span><br><span class="line">//当然要使得这套机制生效还得修改/etc/ssh/sshd_config文件</span><br><span class="line">//找到 #RSAAuthentication yes 和  #PubkeyAuthentication yes 以及#AuthorizedKeysFile      .ssh/authorized_keys 上的注释#去掉使配置生效</span><br></pre></td></tr></table></figure>
<h3 id="git服务器安装就完成了现在我们禁用git用户通过shell登录其只能使用git-shell"><a href="#git服务器安装就完成了现在我们禁用git用户通过shell登录其只能使用git-shell" class="headerlink" title="git服务器安装就完成了现在我们禁用git用户通过shell登录其只能使用git-shell"></a>git服务器安装就完成了现在我们禁用git用户通过shell登录其只能使用git-shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/passwd</span><br><span class="line">将</span><br><span class="line">git:x:1000:1000::/home/git:/bin/bash</span><br><span class="line">改为</span><br><span class="line">git:x:1000:1000::/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo遇到的问题</title>
    <url>/2021/11/08/hexo%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="使用hexo搭设个人blog的时候遇到问题的记录"><a href="#使用hexo搭设个人blog的时候遇到问题的记录" class="headerlink" title="使用hexo搭设个人blog的时候遇到问题的记录"></a>使用hexo搭设个人blog的时候遇到问题的记录</h2><h4 id="1、使用自定义主题的的时候，按照官方提示进行配置页面出现的问题。"><a href="#1、使用自定义主题的的时候，按照官方提示进行配置页面出现的问题。" class="headerlink" title="1、使用自定义主题的的时候，按照官方提示进行配置页面出现的问题。"></a>1、使用自定义主题的的时候，按照官方提示进行配置页面出现“{% extends ‘_layout.swig‘ %} {% import ‘_macro/post.swig‘ as post_template %}”的问题。</h4><blockquote>
<p><strong>原因：hexo在5.0之后把swig给删除了需要自己手动安装。</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="2、在写文章的时候引入图片的操作。"><a href="#2、在写文章的时候引入图片的操作。" class="headerlink" title="2、在写文章的时候引入图片的操作。"></a>2、在写文章的时候引入图片的操作。</h4><blockquote>
<p><strong>1、安装插件</strong><br>npm install hexo-asset-image –save<br><strong>2、需要配置文件</strong><br>在博客的根目录的配置文件_config.yml中，添加post_asset_folder: true<br><strong>3、新建文章</strong><br>hexo new post newArticle<br>随即在source&#x2F;_posts下就会产生和文章名字一样的目录newArticle，此为新创建文章的图片存储目录；<br><strong>4、引用图片</strong><br>在文章中使用如下语句，引用目录里的图片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![此处写上关于图片的备注](img.png)</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="3、引入图片插件并配置好后发现图片地址依然不能显示，查看图片的地址，路径不对。"><a href="#3、引入图片插件并配置好后发现图片地址依然不能显示，查看图片的地址，路径不对。" class="headerlink" title="3、引入图片插件并配置好后发现图片地址依然不能显示，查看图片的地址，路径不对。"></a>3、引入图片插件并配置好后发现图片地址依然不能显示，查看图片的地址，路径不对。</h4><blockquote>
<p><strong>问题描述：</strong>使用 Hexo-asset-image 插件静态图片路径会变成一个错误的路径.<br>可以看到错误的图片url后是域名后面接着图片名，中间缺少了图片的路径。<br><strong>解决方案：</strong><br>1、cd node_modules&#x2F;hexo-asset-image<br>2、打开index.js<br>3、查找并修改内容</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">// console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">$(this).attr(&#x27;src&#x27;, data.permalink +src);</span><br><span class="line">console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot; + data.permalink + src);</span><br></pre></td></tr></table></figure>

<h4 id="4、Hexo博客导航栏链接URL乱码问题-参考-。"><a href="#4、Hexo博客导航栏链接URL乱码问题-参考-。" class="headerlink" title="4、Hexo博客导航栏链接URL乱码问题(参考)。"></a>4、Hexo博客导航栏链接URL乱码问题(<a href="https://blog.csdn.net/fullbug/article/details/103844424">参考</a>)。</h4><blockquote>
<p><strong>问题描述1：</strong>在搭设博客的时候，右侧导点击相应的航栏链接时发现url乱码。在网上查看问题，发现是hexo-theme-next这个主题的模板代码对空格的处理上有问题。<br><strong>解决“menu”中的乱码：</strong>修改模板的配置文件 \themes\hexo-theme-next_config.yml文件，去掉menu配置中，||两边的空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"> home: /||home</span><br><span class="line"> #about: /about/ || user</span><br><span class="line"> tags: /tags/||tags</span><br><span class="line"> categories: /categories/||th</span><br><span class="line"> archives: /archives/||archive</span><br><span class="line"> #schedule: /schedule/||calendar</span><br><span class="line"> #sitemap: /sitemap.xml||sitemap</span><br><span class="line"> commonweal: /404/||heartbeat</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>解决“日志”菜单url乱码：</strong>在 themes\hexo-theme-next\layout_macro 找到sidebar.swig 文件 找到如下代码，将其中一句更换为下面内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if config.archive_dir != &#x27;/&#x27; and site.posts.length &gt; 0 %&#125;</span><br><span class="line"> &lt;div class=&quot;site-state-item site-state-posts&quot;&gt;</span><br><span class="line"> &#123;% if theme.menu.archives %&#125;</span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;&gt;</span><br><span class="line"> &#123;% else %&#125;</span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(config.archive_dir) &#125;&#125;&quot;&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br><span class="line">  &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.posts.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&#x27;state.posts&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">// 将该句</span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;&gt;</span><br><span class="line">// 替换为</span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives.split(&#x27;||&#x27;)[0]) | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="5、文章中有等特殊字符时导致的报错。"><a href="#5、文章中有等特殊字符时导致的报错。" class="headerlink" title="5、文章中有等特殊字符时导致的报错。"></a>5、文章中有{{}}、{%、%}、等特殊字符时导致的报错。</h4><blockquote>
<p><strong>问题原因：</strong>Hexo使用Nunjucks来渲染帖子（Swig在旧版本中使用，它们有相似的语法）。 使用{{}}或{％％}包装的内容将被解析，并可能导致问题。<br><strong>解决方式：</strong>1、可以直接放在脚本语法中，这样不会被编译。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% else %&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>2、可以用hexo的raw标签来把有冲突的文本包起来让hexo对大括号不做解析.例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">含有特殊字符的内容</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="6、hexo的next主题添加百度-x2F-谷歌-x2F-本地-自定义站点内容搜索。"><a href="#6、hexo的next主题添加百度-x2F-谷歌-x2F-本地-自定义站点内容搜索。" class="headerlink" title="6、hexo的next主题添加百度&#x2F;谷歌&#x2F;本地 自定义站点内容搜索。"></a>6、<a href="http://theme-next.iissnan.com/third-party-services.html#local-search">hexo的next主题添加百度&#x2F;谷歌&#x2F;本地 自定义站点内容搜索</a>。</h4>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的README.md</title>
    <url>/2019/04/20/hexo%E7%9A%84README-md/</url>
    <content><![CDATA[<h2 id="hexo安装和部署命令："><a href="#hexo安装和部署命令：" class="headerlink" title="hexo安装和部署命令："></a>hexo安装和部署命令：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo       //全局安装Hexo</span><br><span class="line">hexo init         //初始化hexo</span><br><span class="line">hexo generate（hexo g也可以）  //生成静态页面</span><br><span class="line">hexo server         //启动本地服务，进行文章预览调试</span><br><span class="line">hexo deploy         //将.deploy目录部署到GitHub</span><br><span class="line">hexo help           //查看帮助</span><br><span class="line">hexo version        //查看Hexo的版本</span><br><span class="line"></span><br><span class="line">//每次部署的步骤，可按以下三步来进行</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line">//上面3个命令可以简写</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<h2 id="一些常用命令："><a href="#一些常用命令：" class="headerlink" title="一些常用命令："></a>一些常用命令：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot;     //新建文章</span><br><span class="line">hexo new page&quot;pageName&quot;     //新建页面</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>README.md</tag>
      </tags>
  </entry>
  <entry>
    <title>javaScript代码书写风格</title>
    <url>/2017/12/06/javaScript%E4%BB%A3%E7%A0%81%E4%B9%A6%E5%86%99%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="javascript-Style-Guide"><a href="#javascript-Style-Guide" class="headerlink" title="javascript Style Guide"></a>javascript Style Guide</h1><h2 id="结尾无多余空格"><a href="#结尾无多余空格" class="headerlink" title="结尾无多余空格"></a>结尾无多余空格</h2><p>像你每次餐后刷牙一样，提交代码前请清空你JS文件中所有多余的空格。</p>
<h2 id="使用分号"><a href="#使用分号" class="headerlink" title="使用分号"></a>使用分号</h2><p>科学研究表明，良好的分号使用习惯会给我们带来很大的益处。请在行末等应该使用分号的地方使用它。</p>
<span id="more"></span>

<h2 id="一行最多80字符"><a href="#一行最多80字符" class="headerlink" title="一行最多80字符"></a>一行最多80字符</h2><p>虽然现在的显示器越来越宽，但是我们的智慧却没有同比增长，请保持一行最多80个字符，这样会让阅读更容易些。</p>
<h2 id="使用单引号"><a href="#使用单引号" class="headerlink" title="使用单引号"></a>使用单引号</h2><p>除非你书写JSON，否则请全部使用单引号。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="在同一行打开括号"><a href="#在同一行打开括号" class="headerlink" title="在同一行打开括号"></a>在同一行打开括号</h2><p>在同一行里打开括号，使用方法如下</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;winning&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;losing&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，请注意在条件语句前后使用空格隔开（小括号前后）。</p>
<h2 id="链式方法"><a href="#链式方法" class="headerlink" title="链式方法"></a>链式方法</h2><p>如果要使用链式方法，每种方法应该独占一行。</p>
<p>而且在这些方法前使用相同的缩进，让他们更容易被识别为同一链式方法的一部分</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">User</span></span><br><span class="line">  .<span class="title function_">findOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">populate</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">  .<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">*<span class="title class_">Wrong</span>:*</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">.findOne(&#123; name: &#x27;foo&#x27; &#125;)</span></span><br><span class="line"><span class="string">.populate(&#x27;bar&#x27;)</span></span><br><span class="line"><span class="string">.exec(function(err, user) &#123;</span></span><br><span class="line"><span class="string">  return true;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User.findOne(&#123; name: &#x27;foo&#x27; &#125;)</span></span><br><span class="line"><span class="string">  .populate(&#x27;bar&#x27;)</span></span><br><span class="line"><span class="string">  .exec(function(err, user) &#123;</span></span><br><span class="line"><span class="string">    return true;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User.findOne(&#123; name: &#x27;foo&#x27; &#125;).populate(&#x27;bar&#x27;)</span></span><br><span class="line"><span class="string">.exec(function(err, user) &#123;</span></span><br><span class="line"><span class="string">  return true;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User.findOne(&#123; name: &#x27;foo&#x27; &#125;).populate(&#x27;bar&#x27;)</span></span><br><span class="line"><span class="string">  .exec(function(err, user) &#123;</span></span><br><span class="line"><span class="string">    return true;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为了避免全局变量污染，请在定义变量时使用var进行声明</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">   <span class="comment">// bad</span></span><br><span class="line">   superPower = <span class="keyword">new</span> <span class="title class_">SuperPower</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// good</span></span><br><span class="line">   <span class="keyword">var</span> superPower = <span class="keyword">new</span> <span class="title class_">SuperPower</span>();</span><br></pre></td></tr></table></figure>

<p>每个变量的声明之前请都使用一个var ，<br>这样会让你很容易的辨识变量并且不用关心需要使用;还是,结尾。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="title function_">getItems</span>(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="title function_">getItems</span>(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="title function_">getItems</span>();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball = <span class="string">&#x27;z&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>未进行赋值的变量声明请放到最后。这样会方便你以后查找已赋值的变量，并方便你对新变量进行赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i, len, dragonball,</span><br><span class="line">    items = <span class="title function_">getItems</span>(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> items = <span class="title function_">getItems</span>();</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="title function_">getItems</span>();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> length;</span><br><span class="line"><span class="keyword">var</span> i;</span><br></pre></td></tr></table></figure>

<p>在作用域的顶部声明需要的变量。这有助于解决变量声明和变量赋值相关的问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doing stuff..&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name = <span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doing stuff..&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - unnecessary function call</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">arguments</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setFirstName</span>(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">arguments</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  name = <span class="title function_">getName</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setFirstName</span>(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用小驼峰命名法（lowerCamelCase）命名变量、属性和函数"><a href="#使用小驼峰命名法（lowerCamelCase）命名变量、属性和函数" class="headerlink" title="使用小驼峰命名法（lowerCamelCase）命名变量、属性和函数"></a>使用小驼峰命名法（lowerCamelCase）命名变量、属性和函数</h2><p>变量、属性和函数的命名应使用小驼峰命名法（lowerCamelCase）。<br>它应该是可描述的，避免使用单变量或者特别冷僻的缩写。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> adminUser = db.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM users ...&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> admin_user = db.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM users ...&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="使用大驼峰命名法（UpperCamelCase）命名类名"><a href="#使用大驼峰命名法（UpperCamelCase）命名类名" class="headerlink" title="使用大驼峰命名法（UpperCamelCase）命名类名"></a>使用大驼峰命名法（UpperCamelCase）命名类名</h2><p>类名应用大驼峰命名法命名。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BankAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bank_Account</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用大写声明常量"><a href="#用大写声明常量" class="headerlink" title="用大写声明常量"></a>用大写声明常量</h2><p>常量的声明（常规变量或静态类属性）应使用大写字母声明。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">SECOND</span> = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">File</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">File</span>.<span class="property">FULL_PERMISSIONS</span> = <span class="number">0777</span>;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECOND</span> = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">File</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">File</span>.<span class="property">fullPermissions</span> = <span class="number">0777</span>;</span><br></pre></td></tr></table></figure>

<h2 id="对象-x2F-数组"><a href="#对象-x2F-数组" class="headerlink" title="对象&#x2F;数组"></a>对象&#x2F;数组</h2><p>简短的数组声明时占据一行使用逗号隔开，key：value的形式请按照如下展示。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  <span class="attr">good</span>: <span class="string">&#x27;code&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;is generally&#x27;</span>: <span class="string">&#x27;pretty&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">  <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="string">&quot;good&quot;</span>: <span class="string">&#x27;code&#x27;</span></span><br><span class="line">        , is <span class="attr">generally</span>: <span class="string">&#x27;pretty&#x27;</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>使用字面语法创建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>不要使用保留字做key值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="attr">default</span>: &#123; <span class="attr">clark</span>: <span class="string">&#x27;kent&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">private</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="attr">defaults</span>: &#123; <span class="attr">clark</span>: <span class="string">&#x27;kent&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>用可读性强的同义词来替代关键字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="attr">class</span>: <span class="string">&#x27;alien&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="attr">klass</span>: <span class="string">&#x27;alien&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;alien&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>使用字面语法创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br></pre></td></tr></table></figure>

<p>对数组赋值时，使用数组push方法而不是直接赋值是个好习惯</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.<span class="property">length</span>] = <span class="string">&#x27;abracadabra&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.<span class="title function_">push</span>(<span class="string">&#x27;abracadabra&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>当你拷贝一个数组时，使用数组方法slice会大幅提高性能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> len = items.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">var</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">itemsCopy = items.<span class="title function_">slice</span>();</span><br></pre></td></tr></table></figure>

<p>转换一个类对象的数组为普通数组，使用数组的slice方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数表达式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// anonymous function expression</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// named function expression</span></span><br><span class="line"><span class="keyword">var</span> named = <span class="keyword">function</span> <span class="title function_">named</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// immediately-invoked function expression (IIFE)</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Welcome to the Internet. Please follow me.&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>不要在非功能模块声明函数（if, while, etc），如果需要这做，请声明一个变量来接替它， 浏览器虽然允许你这样做，但是会形成不同的解析。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Nope.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Yup.&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要将 arguments 作为形参传递。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nope</span>(<span class="params">name, options, <span class="variable language_">arguments</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">yup</span>(<span class="params">name, options, args</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>在直接访问属性时使用. 来进行访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> isJedi = luke[<span class="string">&#x27;jedi&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> isJedi = luke.<span class="property">jedi</span>;</span><br></pre></td></tr></table></figure>

<p>用[]来访问变量传递的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProp</span>(<span class="params">prop</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isJedi = <span class="title function_">getProp</span>(<span class="string">&#x27;jedi&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="使用-x3D-x3D-x3D-操作"><a href="#使用-x3D-x3D-x3D-操作" class="headerlink" title="使用 &#x3D;&#x3D;&#x3D; 操作"></a>使用 &#x3D;&#x3D;&#x3D; 操作</h2><p>在需要的地方使用 &#x3D;&#x3D;&#x3D; 会按照你所期望的进行操作。从而避免那些编程中规则上的漏洞。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;winning&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;losing&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用多行形式的三目运算符"><a href="#使用多行形式的三目运算符" class="headerlink" title="使用多行形式的三目运算符"></a>使用多行形式的三目运算符</h2><p>不要使用单行形式的三目运算符，用多行形式来替代它。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (a === b)</span><br><span class="line">  ? <span class="number">1</span></span><br><span class="line">  : <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (a === b) ? <span class="number">1</span> : <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="不要扩展JavaScript原生的原型"><a href="#不要扩展JavaScript原生的原型" class="headerlink" title="不要扩展JavaScript原生的原型"></a>不要扩展JavaScript原生的原型</h2><p>不要扩展JavaScript原生的原型，将来你一定会感谢你自己的。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">if</span> (!a.<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;winning&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">if</span> (a.<span class="title function_">empty</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;losing&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用描述性条件"><a href="#使用描述性条件" class="headerlink" title="使用描述性条件"></a>使用描述性条件</h2><p>任何特殊的条件，都应被声明成一个变量或一个函数来整体使用。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValidPassword = password.<span class="property">length</span> &gt;= <span class="number">4</span> &amp;&amp; <span class="regexp">/^(?=.*\d).&#123;4,&#125;$/</span>.<span class="title function_">test</span>(password);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isValidPassword) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;winning&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (password.<span class="property">length</span> &gt;= <span class="number">4</span> &amp;&amp; <span class="regexp">/^(?=.*\d).&#123;4,&#125;$/</span>.<span class="title function_">test</span>(password)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;losing&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写小型函数"><a href="#编写小型函数" class="headerlink" title="编写小型函数"></a>编写小型函数</h2><p>保持你的函数尽量短小，一个函数只实现一个功能。<br>尽量保持一个函数不要超过15行代码，让你的函数更加容易被阅读理解。</p>
<h2 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h2><p>为了避免函数的if语句深度嵌套，请在需要return时尽可能早的使用它。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPercentage</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (val &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPercentage</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者针对这个例子我们可以更简短的解决它（逻辑优化）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPercentage</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> isInRange = (val &gt;= <span class="number">0</span> &amp;&amp; val &lt;= <span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> isInRange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给闭包命名"><a href="#给闭包命名" class="headerlink" title="给闭包命名"></a>给闭包命名</h2><p>请给闭包一个名称，表明你关心他们。这将会生成更好的堆栈跟踪、堆和CPU配置文件。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span> <span class="title function_">onEnd</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;winning&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;losing&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="禁止闭包嵌套"><a href="#禁止闭包嵌套" class="headerlink" title="禁止闭包嵌套"></a>禁止闭包嵌套</h2><p>使用闭包，但不要嵌套，不然会让你的代码变的一团糟。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  client.<span class="title function_">connect</span>(afterConnect);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">afterConnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;winning&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  client.<span class="title function_">connect</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;losing&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>使用 <code>/** ... */</code> 来进行多行注释，包括描述、指定所有参数、返回值的类型和值等相关信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">make</span>(<span class="params">tag</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed in tag name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">tag</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Element</span>&#125; <span class="variable">element</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">make</span>(<span class="params">tag</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>//</code> 来进行单行注释. 使用单行注释时请独立起一行，并且在注释之前再空一行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetching type...&#x27;</span>);</span><br><span class="line">  <span class="comment">// set the default type to &#x27;no type&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="variable language_">this</span>.<span class="property">_type</span> || <span class="string">&#x27;no type&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetching type...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to &#x27;no type&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="variable language_">this</span>.<span class="property">_type</span> || <span class="string">&#x27;no type&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>FIXME</code> or <code>TODO</code>作为前缀来帮助注释相关区域。帮助开发人员迅速定位和理解代码。例如<code>FIXME -- need to figure this out</code> or <code>TODO -- need to implement</code>.</p>
<p>使用<code>// FIXME:</code> 来指出问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Calculator</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn&#x27;t use a global here</span></span><br><span class="line">  total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>// TODO:</code> 来说明如何解决。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Calculator</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">total</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用注释或代码片段去解释难点，而不是过分使用来说琐碎的事情。</p>
<p><em>Right:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;ID_SOMETHING=VALUE&#x27; -&gt; [&#x27;ID_SOMETHING=VALUE&#x27;, &#x27;SOMETHING&#x27;, &#x27;VALUE&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> matches = item.<span class="title function_">match</span>(<span class="regexp">/ID_([^\n]+)=([^\n]+)/</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function has a nasty side effect where a failure to increment a</span></span><br><span class="line"><span class="comment">// redis counter used for statistics will cause an exception. This needs</span></span><br><span class="line"><span class="comment">// to be fixed in a later iteration.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadUser</span>(<span class="params">id, cb</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isSessionValid = (session.<span class="property">expires</span> &lt; <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line"><span class="keyword">if</span> (isSessionValid) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Wrong:</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Execute a regex</span></span><br><span class="line"><span class="keyword">var</span> matches = item.<span class="title function_">match</span>(<span class="regexp">/ID_([^\n]+)=([^\n]+)/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage: loadUser(5, function() &#123; ... &#125;)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadUser</span>(<span class="params">id, cb</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the session is valid</span></span><br><span class="line"><span class="keyword">var</span> isSessionValid = (session.<span class="property">expires</span> &lt; <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line"><span class="comment">// If the session is valid</span></span><br><span class="line"><span class="keyword">if</span> (isSessionValid) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>在声明开始时就执行类型的强制转换<br>Strings:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="variable language_">this</span>.<span class="property">reviewScore</span> + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">&#x27;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">reviewScore</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">&#x27;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">reviewScore</span> + <span class="string">&#x27; total score&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="variable language_">this</span>.<span class="property">reviewScore</span> + <span class="string">&#x27; total score&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>parseInt</code>来转换Numbers的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inputValue = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="title class_">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="title class_">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>如果在其他情况下需要使用位移等其他特性来转换，请留言解释为什么和你在做什么。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></span><br><span class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></span><br><span class="line"><span class="comment"> * Number made it a lot faster.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注:</strong> 小心使用位移操作。数字代表64位的值，但位移操作总是返回一个32位的整数。位移大于32位会发生意外。最大32位是2147483647。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure>

<p>Booleans:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="title class_">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hasAge = <span class="title class_">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hasAge = !!age;</span><br></pre></td></tr></table></figure>

<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>分配方法给原型对象，来代替重写对象的原型方法。不然你可能会覆盖底层原有的原型！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Jedi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new jedi&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">fight</span>: <span class="keyword">function</span> <span class="title function_">fight</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fighting&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">block</span>: <span class="keyword">function</span> <span class="title function_">block</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;blocking&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fight</span> = <span class="keyword">function</span> <span class="title function_">fight</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fighting&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">block</span> = <span class="keyword">function</span> <span class="title function_">block</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;blocking&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>原型的方法能够返回<code>this</code> 来帮助你的方法链。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">jump</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">jumping</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setHeight</span> = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> <span class="title class_">Jedi</span>();</span><br><span class="line">luke.<span class="title function_">jump</span>(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.<span class="title function_">setHeight</span>(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">jump</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">jumping</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setHeight</span> = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> <span class="title class_">Jedi</span>();</span><br><span class="line"></span><br><span class="line">luke.<span class="title function_">jump</span>()</span><br><span class="line">  .<span class="title function_">setHeight</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>


<p>写一个本地的toString()方法是可以的，只要你能确保它能有效作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Jedi</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = options.<span class="property">name</span> || <span class="string">&#x27;no name&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Jedi</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Jedi - &#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">getName</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>当一个附加的数据负载到事件上（无论是DOM事件或其他私有事件例），传一个哈希来替代原始值，这样允许在之后使用的地方拓展参数并且不用找到每个使用的地方去改动它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">trigger</span>(<span class="string">&#x27;listingUpdated&#x27;</span>, listing.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">on</span>(<span class="string">&#x27;listingUpdated&#x27;</span>, <span class="keyword">function</span>(<span class="params">e, listingId</span>) &#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>prefer:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">trigger</span>(<span class="string">&#x27;listingUpdated&#x27;</span>, &#123; listingId : listing.<span class="property">id</span> &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">on</span>(<span class="string">&#x27;listingUpdated&#x27;</span>, <span class="keyword">function</span>(<span class="params">e, data</span>) &#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>模块开发时要用<code>!</code>作为开头。 这样可以确保如果一个错误的模块忘记包含最后的分号，那么脚本连接时生产中就不会出现错误。</li>
<li>文件应该用驼峰命名，文件夹也应该使用相同的命名，同时输出的出口也用这个名字。</li>
<li>增加一个叫 <code>noConflict()</code> 的方法，来设置出口方法保证该方法的新版本能够去替换旧的版本，保证不产生方法冲突。</li>
<li>在模块头部声明 <code>&#39;use strict&#39;;</code> 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fancyInput/fancyInput.js</span></span><br><span class="line"></span><br><span class="line">!<span class="keyword">function</span>(<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previousFancyInput = <span class="variable language_">global</span>.<span class="property">FancyInput</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">FancyInput</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">FancyInput</span>.<span class="property">noConflict</span> = <span class="keyword">function</span> <span class="title function_">noConflict</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">global</span>.<span class="property">FancyInput</span> = previousFancyInput;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FancyInput</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">FancyInput</span> = <span class="title class_">FancyInput</span>;</span><br><span class="line">&#125;(<span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>定义jQ对象时请使用前缀<code>$</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> sidebar = $(<span class="string">&#x27;.sidebar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">&#x27;.sidebar&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>缓存 jQuery 查找出来的对象.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setSidebar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;.sidebar&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;.sidebar&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setSidebar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">&#x27;.sidebar&#x27;</span>);</span><br><span class="line">  $sidebar.<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在层叠查询DOM结构时，使用<code>$(&#39;.sidebar ul&#39;)</code> 或者 parent &gt; child <code>$(&#39;.sidebar &gt; ul&#39;)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>, <span class="string">&#x27;.sidebar&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">&#x27;.sidebar&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">&#x27;.sidebar ul&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">&#x27;.sidebar &gt; ul&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.<span class="title function_">find</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">hide</span>();</span><br></pre></td></tr></table></figure>

<h2 id="Object-freeze-Object-preventExtensions-Object-seal-with-eval"><a href="#Object-freeze-Object-preventExtensions-Object-seal-with-eval" class="headerlink" title="Object.freeze, Object.preventExtensions, Object.seal, with, eval"></a>Object.freeze, Object.preventExtensions, Object.seal, with, eval</h2><p>上面提到的东西，通通不要使用。</p>
<h2 id="该文档是朋友所写，感觉不错，在此记录下，希望能被更多人看到。"><a href="#该文档是朋友所写，感觉不错，在此记录下，希望能被更多人看到。" class="headerlink" title="该文档是朋友所写，感觉不错，在此记录下，希望能被更多人看到。"></a>该文档是朋友所写，感觉不错，在此记录下，希望能被更多人看到。</h2>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>风格</tag>
      </tags>
  </entry>
  <entry>
    <title>npm link用法总结</title>
    <url>/2020/04/20/npm-link%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>npm link用来在本地项目和本地npm模块之间建立连接，可以在本地进行模块测试</p>
</blockquote>
<h2 id="具体用法："><a href="#具体用法：" class="headerlink" title="具体用法："></a>具体用法：</h2><h3 id="1-项目和模块在同一个目录下，可以使用相对路径"><a href="#1-项目和模块在同一个目录下，可以使用相对路径" class="headerlink" title="1.项目和模块在同一个目录下，可以使用相对路径"></a>1.项目和模块在同一个目录下，可以使用相对路径</h3><h4 id="npm-link-x2F-module"><a href="#npm-link-x2F-module" class="headerlink" title="npm link ..&#x2F;module"></a>npm link ..&#x2F;module</h4><span id="more"></span>
<h3 id="2-项目和模块不在同一个目录下"><a href="#2-项目和模块不在同一个目录下" class="headerlink" title="2.项目和模块不在同一个目录下"></a>2.项目和模块不在同一个目录下</h3><h4 id="cd到模块目录，npm-link，进行全局link-cd到项目目录，npm-link-模块名-package-json中的name"><a href="#cd到模块目录，npm-link，进行全局link-cd到项目目录，npm-link-模块名-package-json中的name" class="headerlink" title="cd到模块目录，npm link，进行全局link cd到项目目录，npm link 模块名(package.json中的name)"></a>cd到模块目录，npm link，进行全局link <br>cd到项目目录，npm link 模块名(package.json中的name)</h4><h3 id="3-解除link"><a href="#3-解除link" class="headerlink" title="3.解除link"></a>3.解除link</h3><h4 id="解除项目和模块link，项目目录下，npm-unlink-模块名-解除模块全局link，模块目录下，npm-unlink-模块名"><a href="#解除项目和模块link，项目目录下，npm-unlink-模块名-解除模块全局link，模块目录下，npm-unlink-模块名" class="headerlink" title="解除项目和模块link，项目目录下，npm unlink 模块名  解除模块全局link，模块目录下，npm unlink 模块名"></a>解除项目和模块link，项目目录下，npm unlink 模块名 <br> 解除模块全局link，模块目录下，npm unlink 模块名</h4><h3 id="4-MacOS全局命令路径"><a href="#4-MacOS全局命令路径" class="headerlink" title="4.MacOS全局命令路径"></a>4.MacOS全局命令路径</h3><h4 id="x2F-usr-x2F-local-x2F-bin-x2F"><a href="#x2F-usr-x2F-local-x2F-bin-x2F" class="headerlink" title="&#x2F;usr&#x2F;local&#x2F;bin&#x2F;"></a>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;</h4><h3 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h3><h4 id="x2F-Users-x2F-mjt-x2F-DW-目录下的release-code模块（用于在本地终端，直接发布服务器上的项目），用npm-link到全局后直接在终端输入指令，可以实现登录服务器，执行服务器上的脚本发布项目。"><a href="#x2F-Users-x2F-mjt-x2F-DW-目录下的release-code模块（用于在本地终端，直接发布服务器上的项目），用npm-link到全局后直接在终端输入指令，可以实现登录服务器，执行服务器上的脚本发布项目。" class="headerlink" title="&#x2F;Users&#x2F;mjt&#x2F;DW 目录下的release-code模块（用于在本地终端，直接发布服务器上的项目），用npm link到全局后直接在终端输入指令，可以实现登录服务器，执行服务器上的脚本发布项目。"></a>&#x2F;Users&#x2F;mjt&#x2F;DW 目录下的release-code模块（用于在本地终端，直接发布服务器上的项目），用npm link到全局后直接在终端输入指令，可以实现登录服务器，执行服务器上的脚本发布项目。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd DW/release-code </span><br><span class="line"></span><br><span class="line">npm link</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>npm</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>post请求封装</title>
    <url>/2017/09/10/post%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h4 id="原生javaScript封装Ajax的post请求："><a href="#原生javaScript封装Ajax的post请求：" class="headerlink" title="原生javaScript封装Ajax的post请求："></a>原生javaScript封装Ajax的post请求：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function post(url, param, callback) &#123;</span><br><span class="line">    var xmlhttp = new XMLHttpRequest();</span><br><span class="line">    var paraStr = &#x27;&#x27;;</span><br><span class="line">    xmlhttp.onreadystatechange = function () &#123;</span><br><span class="line">        if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</span><br><span class="line">            callback(JSON.parse(xmlhttp.responseText));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xmlhttp.open(&#x27;post&#x27;, url, true);</span><br><span class="line">    xmlhttp.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">    xmlhttp.setRequestHeader(&quot;If-Modified-Since&quot;, &quot;0&quot;);</span><br><span class="line">    //下面这行 请求为ajax</span><br><span class="line">    xmlhttp.setRequestHeader(&quot;X-Requested-With&quot;,&quot;XMLHttpRequest&quot;);</span><br><span class="line">    for (key in param) &#123;</span><br><span class="line">        paraStr += key + &quot;=&quot; + encodeURIComponent(param[key]) + &quot;&amp;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    paraStr = paraStr.substr(0, paraStr.length - 1);</span><br><span class="line">    xmlhttp.send(paraStr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>ajax</tag>
        <tag>post</tag>
      </tags>
  </entry>
  <entry>
    <title>sourceTree回滚代码到指定版本</title>
    <url>/2021/06/02/sourceTree%E5%9B%9E%E6%BB%9A%E4%BB%A3%E7%A0%81%E5%88%B0%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="1、打开sourceTree，选中分支，找到需要回滚的版本，右击选择“将xx重置到此次提交”"><a href="#1、打开sourceTree，选中分支，找到需要回滚的版本，右击选择“将xx重置到此次提交”" class="headerlink" title="1、打开sourceTree，选中分支，找到需要回滚的版本，右击选择“将xx重置到此次提交”"></a>1、打开sourceTree，选中分支，找到需要回滚的版本，右击选择“将xx重置到此次提交”</h3><p><img src="/.io//1.png"></p>
<span id="more"></span>

<h3 id="2、选择强行合并"><a href="#2、选择强行合并" class="headerlink" title="2、选择强行合并"></a>2、选择强行合并</h3><p><img src="/.io//2.png"></p>
<h3 id="3、找到最新的版本，右击，选择“将xx重置到此这提交”选择“软合并”"><a href="#3、找到最新的版本，右击，选择“将xx重置到此这提交”选择“软合并”" class="headerlink" title="3、找到最新的版本，右击，选择“将xx重置到此这提交”选择“软合并”"></a>3、找到最新的版本，右击，选择“将xx重置到此这提交”选择“软合并”</h3><p><img src="/.io//3.png"></p>
<h3 id="4、提交代码，这时候你会发现修改了一些文件需要提交，选中提交即可，这样就会将代码回滚到了指定版本。"><a href="#4、提交代码，这时候你会发现修改了一些文件需要提交，选中提交即可，这样就会将代码回滚到了指定版本。" class="headerlink" title="4、提交代码，这时候你会发现修改了一些文件需要提交，选中提交即可，这样就会将代码回滚到了指定版本。"></a>4、提交代码，这时候你会发现修改了一些文件需要提交，选中提交即可，这样就会将代码回滚到了指定版本。</h3><p><img src="/.io//4.png"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>sourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>vue数据改变，页面不刷新问题</title>
    <url>/2017/12/08/vue%E6%95%B0%E6%8D%AE%E6%94%B9%E5%8F%98%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="问题是这样的，在vue的data数据中心定义一个对象obj，然后在页面加载时给obj添加或修改属性的时候，页面中的视图不会同步更新，按理来说vue-data数据中的数据是双向绑定的，当数据中的数据发生改变时，视图就会同步更新才对。"><a href="#问题是这样的，在vue的data数据中心定义一个对象obj，然后在页面加载时给obj添加或修改属性的时候，页面中的视图不会同步更新，按理来说vue-data数据中的数据是双向绑定的，当数据中的数据发生改变时，视图就会同步更新才对。" class="headerlink" title="问题是这样的，在vue的data数据中心定义一个对象obj，然后在页面加载时给obj添加或修改属性的时候，页面中的视图不会同步更新，按理来说vue data数据中的数据是双向绑定的，当数据中的数据发生改变时，视图就会同步更新才对。"></a>问题是这样的，在vue的data数据中心定义一个对象obj，然后在页面加载时给obj添加或修改属性的时候，页面中的视图不会同步更新，按理来说vue data数据中的数据是双向绑定的，当数据中的数据发生改变时，视图就会同步更新才对。</h3><h3 id="查看vue文档中说明："><a href="#查看vue文档中说明：" class="headerlink" title="查看vue文档中说明："></a>查看<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">vue文档</a>中说明：</h3><h4 id="受现代-JavaScript-的限制-以及废弃-Object-observe-，Vue-不能检测到对象属性的添加或删除。由于-Vue-会在初始化实例时对属性执行-getter-x2F-setter-转化过程，所以属性必须在-data-对象上存在才能让-Vue-转换它，这样才能让它是响应的。例如："><a href="#受现代-JavaScript-的限制-以及废弃-Object-observe-，Vue-不能检测到对象属性的添加或删除。由于-Vue-会在初始化实例时对属性执行-getter-x2F-setter-转化过程，所以属性必须在-data-对象上存在才能让-Vue-转换它，这样才能让它是响应的。例如：" class="headerlink" title="受现代 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。例如："></a>受现代 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。例如：</h4><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">  a:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// `vm.a` 是响应的</span><br><span class="line"></span><br><span class="line">vm.b = 2</span><br><span class="line">// `vm.b` 是非响应的</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Vue-不允许在已经创建的实例上动态添加新的根级响应式属性-root-level-reactive-property-。然而它可以使用-Vue-set-object-key-value-方法将响应属性添加到嵌套的对象上："><a href="#Vue-不允许在已经创建的实例上动态添加新的根级响应式属性-root-level-reactive-property-。然而它可以使用-Vue-set-object-key-value-方法将响应属性添加到嵌套的对象上：" class="headerlink" title="Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上："></a>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.set(vm.someObject, &#x27;b&#x27;, 2)</span><br></pre></td></tr></table></figure>
<h4 id="您还可以使用-vm-set-实例方法，这也是全局-Vue-set-方法的别名："><a href="#您还可以使用-vm-set-实例方法，这也是全局-Vue-set-方法的别名：" class="headerlink" title="您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名："></a>您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$set(this.someObject,&#x27;b&#x27;,2)</span><br></pre></td></tr></table></figure>
<h4 id="有时你想向已有对象上添加一些属性，例如使用-Object-assign-或-extend-方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性："><a href="#有时你想向已有对象上添加一些属性，例如使用-Object-assign-或-extend-方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性：" class="headerlink" title="有时你想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性："></a>有时你想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span><br><span class="line">this.someObject = Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="也有一些数组相关的问题，之前已经在列表渲染中讲过。"><a href="#也有一些数组相关的问题，之前已经在列表渲染中讲过。" class="headerlink" title="也有一些数组相关的问题，之前已经在列表渲染中讲过。"></a>也有一些数组相关的问题，之前已经在列表渲染中讲过。</h4><hr>
<h3 id="我是使用第二种解决的，贴下我的代码："><a href="#我是使用第二种解决的，贴下我的代码：" class="headerlink" title="我是使用第二种解决的，贴下我的代码："></a>我是使用第二种解决的，贴下我的代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先在data上存一下</span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      startDate: new Date(&quot;2018-01-01&quot;),</span><br><span class="line">      endDate: new Date(&quot;2048-12-31&quot;),</span><br><span class="line">      disable: false,</span><br><span class="line">      userInfor: &#123;</span><br><span class="line">        certification: &#123;</span><br><span class="line">          licencePhoto: &#x27;&#x27;,</span><br><span class="line">          idCardPhotos: [&#x27;&#x27;, &#x27;&#x27;],</span><br><span class="line">          qsPhoto: &#x27;&#x27;,</span><br><span class="line">          storeFrontPhotos: [],</span><br><span class="line">          idCardExpiryDate: &#x27;&#x27;,</span><br><span class="line">          qsExpiryDate: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      isAuthed: &#x27;noAuthed&#x27;,</span><br><span class="line">      nowChooseTimeName: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在mounted中增加userInfor的certification属性</span><br><span class="line"></span><br><span class="line">mounted ()&#123;</span><br><span class="line">    this.userInfor = App.ls.get(&quot;store&quot;)</span><br><span class="line">    if (!this.userInfor.certification) &#123;</span><br><span class="line">      var certification = &#123;</span><br><span class="line">        licencePhoto: &#x27;&#x27;,</span><br><span class="line">        idCardPhotos: [&#x27;&#x27;, &#x27;&#x27;],</span><br><span class="line">        qsPhoto: &#x27;&#x27;,</span><br><span class="line">        storeFrontPhotos: [],</span><br><span class="line">        idCardExpiryDate: &#x27;&#x27;,</span><br><span class="line">        qsExpiryDate: &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">      this.$set(this.userInfor,&#x27;certification&#x27;,certification)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 然后在事件触发时赋值，视图层就能同步展示了</span><br><span class="line"></span><br><span class="line">this.userInfor.certification.licencePhoto = res</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title>vue预渲染总结</title>
    <url>/2021/06/03/vue%E9%A2%84%E6%B8%B2%E6%9F%93%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>vue在实际的项目中经常会遇到需要考虑seo问题，这直接关系到我们网站的排名，但是前后端分离不利于seo。<br>1、搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。<br>2、seo 本质是一个服务器向另一个服务器发起请求，解析请求内容。但一般来说搜索引擎是不回去执行请求到的js的。也就是说，如果一个单页应用，html在服务器端还没有渲染数据，是在浏览器才渲染出数据，而搜索引擎请求到的html是没有渲染数据的。 这样就很不利于内容被搜索引擎搜索到。 所以服务端渲染就是尽量在服务器发送到浏览器前，页面上就是有数据的。</p>
</blockquote>
<span id="more"></span>

<h2 id="像vue这种前后端分离开发的网站，我们还是能够通过其他技术解决seo问题。"><a href="#像vue这种前后端分离开发的网站，我们还是能够通过其他技术解决seo问题。" class="headerlink" title="像vue这种前后端分离开发的网站，我们还是能够通过其他技术解决seo问题。"></a>像vue这种前后端分离开发的网站，我们还是能够通过其他技术解决seo问题。</h2><h3 id="常用的解决方案有三种："><a href="#常用的解决方案有三种：" class="headerlink" title="常用的解决方案有三种："></a>常用的解决方案有三种：</h3><blockquote>
<p>1、页面独立写，路由采用h5 history模式<br>2、页面预渲染<br>3、服务端渲染</p>
</blockquote>
<h2 id="而应用到的技术也是有很多，大体上我总结了四个，也是比较常用的"><a href="#而应用到的技术也是有很多，大体上我总结了四个，也是比较常用的" class="headerlink" title="而应用到的技术也是有很多，大体上我总结了四个，也是比较常用的"></a>而应用到的技术也是有很多，大体上我总结了四个，也是比较常用的</h2><blockquote>
<p>1、ssr,vue官方文档给出的服务器渲染方案，这是一套完整的构建vue服务端渲染应用的指南，<a href="https://cn.vuejs.org/v2/guide/ssr.html">具体参考</a><br>2、vue-meta-info，这个是针对单页面的meta SEO的另一种思路，<a href="https://zhuanlan.zhihu.com/p/29148760">参考网站</a><br>3、nuxt 简单易用，<a href="https://zh.nuxtjs.org/guide/installation">参考网站</a><br>4、phantomjs 页面预渲染，具体参考 phantomjs.org</p>
</blockquote>
<h2 id="而市场上依靠vue做出来的唱功案例还是很多的："><a href="#而市场上依靠vue做出来的唱功案例还是很多的：" class="headerlink" title="而市场上依靠vue做出来的唱功案例还是很多的："></a>而市场上依靠vue做出来的唱功案例还是很多的：</h2><blockquote>
<p> <a href="https://www.bilibili.com/">https://www.bilibili.com</a> （bilibili）<br><a href="http://m.sohu.com/">http://m.sohu.com</a> （手机搜狐网）<br><a href="https://juejin.im/timeline">https://juejin.im/timeline</a> （掘金）<br><a href="http://element.eleme.io/#/en-US">http://element.eleme.io/#/en-US</a> （2）<br><a href="https://classics.autotrader.com/">https://classics.autotrader.com</a> （New&amp;Used Classic Car for sale）<br><a href="http://qiqu.uc.cn/">http://qiqu.uc.cn</a> （奇趣百科）<br><a href="https://m.uhouzz.com/apartments">https://m.uhouzz.com/apartments</a> （异乡好居）</p>
</blockquote>
<h3 id="那么他们是如何做优化的呢？我们通过分析，总结以下几点"><a href="#那么他们是如何做优化的呢？我们通过分析，总结以下几点" class="headerlink" title="那么他们是如何做优化的呢？我们通过分析，总结以下几点"></a>那么他们是如何做优化的呢？我们通过分析，总结以下几点</h3><blockquote>
<p>1、bilibili做了基本的seo优化，比如<br>  1）TDK描叙详细。<br>  2）提升网页加载速度：对外联css,以及js使用了延迟加载以及dns-prefetch，preload。<br>  3）外联较多，关键词排名高。<br>2、 掘金网站使用了vue-meta-info 管理网站的meta，应该配合使用了prerender-spa-plugin 对SEO进行了优化<br>3、 Element在logo上加了首页的地址，并且只有logo是放在h1标签中。<br>4、有一些流量不太高的网站比如<a href="http://www.marshall.edu/">http://www.marshall.edu</a> （Marshall University）做了seo社会化分享优化，在meta信息中出现了property&#x3D;”og:title”这种新东西；<a href="https://we.dji.com/zh-CN/campus">https://we.dji.com/zh-CN/campus</a> （大疆招聘）使用了Nuxt</p>
</blockquote>
<h2 id="这些网站中出现率最高的公共组件或公共方法有四个："><a href="#这些网站中出现率最高的公共组件或公共方法有四个：" class="headerlink" title="这些网站中出现率最高的公共组件或公共方法有四个："></a>这些网站中出现率最高的公共组件或公共方法有四个：</h2><blockquote>
<p>1、面包屑导航 2、Icon 3、搜索框 4、Button组件</p>
</blockquote>
<h2 id="vue项目使用-prerender-spa-plugin-vue-meta-info-seo优化"><a href="#vue项目使用-prerender-spa-plugin-vue-meta-info-seo优化" class="headerlink" title="vue项目使用 prerender-spa-plugin + vue-meta-info seo优化"></a>vue项目使用 prerender-spa-plugin + vue-meta-info seo优化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1、安装prerender-spa-plugin</span><br><span class="line">npm install prerender-spa-plugin --save-dev</span><br><span class="line"></span><br><span class="line">// 2、安装vue-meta-info</span><br><span class="line">npm install vue-meta-info --save-dev</span><br><span class="line"></span><br><span class="line">// 3、相关配置</span><br><span class="line">&lt;!-- webpack.prod.conf.js --&gt;</span><br><span class="line">// 预渲染配置：在webpack.prod.conf文件中加入</span><br><span class="line">const PrerenderSPAPlugin = require(&#x27;prerender-spa-plugin&#x27;)</span><br><span class="line">const Renderer = PrerenderSPAPlugin.PuppeteerRenderer</span><br><span class="line"></span><br><span class="line">// 在 plugins 中加入</span><br><span class="line">new PrerenderSPAPlugin(&#123;</span><br><span class="line">  // 生成文件的路径，也可以与webpakc打包的一致。</span><br><span class="line">  // 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。</span><br><span class="line">  staticDir: path.join(__dirname, &quot;../dist&quot;),</span><br><span class="line"></span><br><span class="line">  // 对应自己的路由文件，比如a有参数，就需要写成 /a/param1。</span><br><span class="line">  routes: [&quot;/&quot;, &quot;/index&quot;, &quot;/findUs&quot;, &quot;/lifeHome&quot;],</span><br><span class="line"></span><br><span class="line">  // 这个很重要，如果没有配置这段，也不会进行预编译</span><br><span class="line">  renderer: new Renderer(&#123;</span><br><span class="line">    // inject: &#123;</span><br><span class="line">    //   foo: &quot;bar&quot;,</span><br><span class="line">    // &#125;,</span><br><span class="line">    // 是否打开浏览器，false 是打开。可用于 debug 检查渲染结果</span><br><span class="line">    // headless: false,</span><br><span class="line">    // renderAfterDocumentEvent: &quot;render-event&quot; // 在 main.js 中(这里貌似不用写，网山说这里写后线上部署会出问题)</span><br><span class="line">    renderAfterTime: 5000</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 4、在main.js中增加下面内容</span><br><span class="line">import MetaInfo from &quot;vue-meta-info&quot;;</span><br><span class="line">Vue.use(MetaInfo);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  router,</span><br><span class="line">  template: &quot;&lt;app/&gt;&quot;,</span><br><span class="line">  components: &#123; app &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    document.dispatchEvent(new Event(&quot;render-event&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="在使用中发现的问提："><a href="#在使用中发现的问提：" class="headerlink" title="在使用中发现的问提："></a>在使用中发现的问提：</h2><p>1、在config文件夹中index.js，如果是部署在跟目录下则assetsPublicPath，使用绝对路径 &#x2F; ，如果不是在跟路径下，如我要使用sublime启动的服务查看，则是在dist目录下，需要改为 &#x2F;dist&#x2F;<br>2、在部署的时候出现了问题，提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@dwweb01 builder]# sh deployBetaWebsite.sh</span><br><span class="line">Already up-to-date.</span><br><span class="line">✔ Installed 53 packages</span><br><span class="line">✔ Linked 0 latest versions</span><br><span class="line">✔ Run 0 scripts</span><br><span class="line">✔ All packages installed (used 63ms(network 60ms), speed 0B/s, json 0(0B), tarball 0B)</span><br><span class="line"></span><br><span class="line">&gt; websetie@1.0.0 build /home/builder/build/website2</span><br><span class="line">&gt; node build/build.js</span><br><span class="line"></span><br><span class="line">⠧ building for production...</span><br><span class="line">Starting to optimize CSS...</span><br><span class="line">Processing css/app.bec55456e6a3cb2122fc8ff75fcf406c.css...</span><br><span class="line">Processed css/app.bec55456e6a3cb2122fc8ff75fcf406c.css, before: 61341, after: 57224, ratio: 93.29%</span><br><span class="line">⠙ building for production...Error: Failed to launch chrome!</span><br><span class="line">/home/builder/build/website2/node_modules/_puppeteer@1.20.0@puppeteer/.local-chromium/linux-686378/chrome-linux/chrome: error while loading shared libraries: libXss.so.1: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md</span><br><span class="line"></span><br><span class="line">    at onClose (/home/builder/build/website2/node_modules/_puppeteer@1.20.0@puppeteer/node6/lib/Launcher.js:400:14)</span><br><span class="line">    at Interface.helper.addEventListener (/home/builder/build/website2/node_modules/_puppeteer@1.20.0@puppeteer/node6/lib/Launcher.js:389:50)</span><br><span class="line">    at emitNone (events.js:91:20)</span><br><span class="line">    at Interface.emit (events.js:185:7)</span><br><span class="line">    at Interface.close (readline.js:319:8)</span><br><span class="line">    at Socket.onend (readline.js:108:10)</span><br><span class="line">    at emitNone (events.js:91:20)</span><br><span class="line">    at Socket.emit (events.js:185:7)</span><br><span class="line">    at endReadableNT (_stream_readable.js:978:12)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:80:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:104:9)</span><br><span class="line">[Prerenderer - PuppeteerRenderer] Unable to start Puppeteer</span><br><span class="line">(node:19836) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 39): TypeError: Cannot read property &#x27;close&#x27; of null</span><br><span class="line">⠴ building for production...</span><br></pre></td></tr></table></figure>
<p>按照<a href="https://www.cnblogs.com/ldld/p/14075059.html">网上说</a>的改了，依然不行，到目前还没有解决。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用css样式</title>
    <url>/2017/11/27/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8css%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="一些常用的css样式"><a href="#一些常用的css样式" class="headerlink" title="一些常用的css样式"></a>一些常用的css样式</h3><h5 id="单行文字省略展示"><a href="#单行文字省略展示" class="headerlink" title="单行文字省略展示"></a>单行文字省略展示</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.ellipsis&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    -ms-text-overflow: ellipsis;</span><br><span class="line">    -o-text-overflow: ellipsis;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h5 id="多行文字省略展示"><a href="#多行文字省略展示" class="headerlink" title="多行文字省略展示"></a>多行文字省略展示</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P&#123;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">    display:-webkit-box;</span><br><span class="line">    -webkit-line-clamp:<span class="number">4</span>;</span><br><span class="line">    -webkit-box-orient:vertical</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="伪类箭头"><a href="#伪类箭头" class="headerlink" title="伪类箭头"></a>伪类箭头</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.form-go::after &#123;</span><br><span class="line">    border-top: 2rpx solid <span class="comment">#CACACA;</span></span><br><span class="line">    border-right: 2rpx solid <span class="comment">#CACACA;</span></span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    width: 18rpx;</span><br><span class="line">    height: 18rpx;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">40</span>%;</span><br><span class="line">    right: 30rpx;</span><br><span class="line">    transform: rotateZ(45deg);</span><br><span class="line">    -webkit-transform: rotateZ(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="兼容所有浏览器的清除浮动-用于父级"><a href="#兼容所有浏览器的清除浮动-用于父级" class="headerlink" title="兼容所有浏览器的清除浮动 用于父级"></a>兼容所有浏览器的清除浮动 用于父级</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    display: block;</span><br><span class="line">    font-size: <span class="number">0</span>;</span><br><span class="line">    content: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    clear: both;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>clearfix</tag>
        <tag>ellipsis</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用的js方法</title>
    <url>/2017/11/24/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84js%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="一些自己用到的方法，简单记录下，或许后面能用上！"><a href="#一些自己用到的方法，简单记录下，或许后面能用上！" class="headerlink" title="一些自己用到的方法，简单记录下，或许后面能用上！"></a>一些自己用到的方法，简单记录下，或许后面能用上！</h4><h5 id="获取随机颜色"><a href="#获取随机颜色" class="headerlink" title="获取随机颜色"></a>获取随机颜色</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getRandomColor () &#123;</span><br><span class="line">  let rgb = []</span><br><span class="line">  <span class="keyword">for</span> (let i = <span class="number">0</span> ; i &lt; <span class="number">3</span>; ++i)&#123;</span><br><span class="line">    let color = Math.floor(Math.random() * <span class="number">256</span>).toString(<span class="number">16</span>)</span><br><span class="line">    color = color.length == <span class="number">1</span> ? <span class="string">&#x27;0&#x27;</span> + color : color</span><br><span class="line">    rgb.push(color)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + rgb.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回例子：<span class="comment">#f684d5</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="判断是否为微信浏览器"><a href="#判断是否为微信浏览器" class="headerlink" title="判断是否为微信浏览器"></a>判断是否为微信浏览器</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function is_weixin()&#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(ua.match(/MicroMessenger/i)==<span class="string">&quot;micromessenger&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="map-十进制颜色换换十六进制"><a href="#map-十进制颜色换换十六进制" class="headerlink" title="map()十进制颜色换换十六进制"></a>map()十进制颜色换换十六进制</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">var arr1 = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        color: <span class="number">9803157</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">let items = arr.concat(arr1.<span class="built_in">map</span>(function(o) &#123;</span><br><span class="line">          let c = <span class="string">&#x27;#&#x27;</span>+ (o.color+<span class="number">0x10000</span>).toString(<span class="number">16</span>);</span><br><span class="line">          o.color = c;</span><br><span class="line">          <span class="keyword">return</span> o;</span><br><span class="line">        &#125;))</span><br><span class="line"></span><br><span class="line">返回示例：  [&#123;</span><br><span class="line">                color:<span class="string">&quot;#969595&quot;</span>,</span><br><span class="line">                name:<span class="string">&quot;name&quot;</span></span><br><span class="line">            &#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="数组分割成多个"><a href="#数组分割成多个" class="headerlink" title="数组分割成多个"></a>数组分割成多个</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var chunk = function (array, size) &#123;</span><br><span class="line">        var result = [];</span><br><span class="line">        <span class="keyword">for</span> (var x = <span class="number">0</span>; x &lt; Math.ceil(array.length / size); x++) &#123;</span><br><span class="line">            var start = x * size;</span><br><span class="line">            var end = start + size;</span><br><span class="line">            result.push(array.<span class="built_in">slice</span>(start, end));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">调用: chunk([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h5 id="移动端屏幕适配"><a href="#移动端屏幕适配" class="headerlink" title="移动端屏幕适配"></a>移动端屏幕适配</h5><h6 id="rem写法-放在最前面"><a href="#rem写法-放在最前面" class="headerlink" title="rem写法(放在最前面)"></a>rem写法(放在最前面)</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 把显示窗口分成<span class="number">16</span>份，1rem就是<span class="number">1</span>/<span class="number">16</span>，通过监测窗口的改变来改变尺寸</span><br><span class="line"></span><br><span class="line">document.documentElement.style.fontSize = innerWidth/<span class="number">16</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">window.onresize = function()&#123;</span><br><span class="line">  document.documentElement.style.fontSize = innerWidth/<span class="number">16</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="最大屏幕宽度750px"><a href="#最大屏幕宽度750px" class="headerlink" title="最大屏幕宽度750px"></a>最大屏幕宽度750px</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">屏幕宽度超过750px，按照750px算，<span class="number">750</span>屏幕下1rem=200px</span><br><span class="line">(function (doc, win) &#123;</span><br><span class="line">  var docEl = doc.documentElement,</span><br><span class="line">  resizeEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> window ? <span class="string">&#x27;orientationchange&#x27;</span> : <span class="string">&#x27;resize&#x27;</span>,</span><br><span class="line">  recalc = function () &#123;</span><br><span class="line">      var clientWidth = docEl.clientWidth;</span><br><span class="line">      <span class="keyword">if</span> (clientWidth&gt;=<span class="number">750</span>) &#123;</span><br><span class="line">          clientWidth = <span class="number">750</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">      docEl.style.fontSize = (clientWidth / <span class="number">750</span> * <span class="number">200</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">  doc.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, recalc, false);</span><br><span class="line">&#125;)(document, window);</span><br></pre></td></tr></table></figure>

<h6 id="根据不同设备的屏幕适配"><a href="#根据不同设备的屏幕适配" class="headerlink" title="根据不同设备的屏幕适配"></a>根据不同设备的屏幕适配</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var is_android = navigator.userAgent.toLowerCase().indexOf(<span class="string">&#x27;android&#x27;</span>) != -<span class="number">1</span>;</span><br><span class="line">var is_ios = navigator.userAgent.toLowerCase().indexOf(<span class="string">&#x27;iphone&#x27;</span>) != -<span class="number">1</span></span><br><span class="line">var is_weixin = navigator.userAgent.toLowerCase().indexOf(<span class="string">&#x27;micromessenger&#x27;</span>) != -<span class="number">1</span>;</span><br><span class="line">var _ww = (window.screen.availWidth * (window.devicePixelRatio || <span class="number">1.5</span>) / <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (is_android &amp;&amp; _ww &lt; <span class="number">720</span>) &#123;</span><br><span class="line">  document.writeln(<span class="string">&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=750px,target-densitydpi=device-dpi,user-scalable=yes,initial-scale=0.5,maximum-scale=1.0&quot; /&gt;&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  document.writeln(<span class="string">&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=750px,target-densitydpi=device-dpi,user-scalable=no,maximum-scale=1.0&quot; /&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="cookie封装"><a href="#cookie封装" class="headerlink" title="cookie封装"></a>cookie封装</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 设置cookie三个参数，key、value、到期天数。</span><br><span class="line">function setCookie(c_name,value,expiredays) &#123;</span><br><span class="line">  var exdate=new Date();</span><br><span class="line">  exdate.setDate(exdate.getDate() + expiredays);</span><br><span class="line">  document.cookie = c_name + <span class="string">&quot;=&quot;</span> + escape(value) + ((expiredays==null) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;;expires=&quot;</span> + exdate.toGMTString());</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">示例，有效期为<span class="number">365</span>天：setCookie(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="number">365</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 获取cookie，若cookie失效，将返回 null。</span><br><span class="line">function getCookie(c_name) &#123;</span><br><span class="line">  <span class="keyword">if</span> (document.cookie.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    var c_start = document.cookie.indexOf(c_name + <span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c_start!=-<span class="number">1</span>) &#123;</span><br><span class="line">      c_start = c_start + c_name.length + <span class="number">1</span>;</span><br><span class="line">      var c_end = document.cookie.indexOf(<span class="string">&quot;;&quot;</span>,c_start);</span><br><span class="line">      <span class="keyword">if</span> (c_end == -<span class="number">1</span>) &#123;</span><br><span class="line">        c_end = document.cookie.length</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> unescape(document.cookie.substring(c_start,c_end));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">示例： getCookie(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 删除cookie</span><br><span class="line">function clearCookie(c_name) &#123;</span><br><span class="line">  document.cookie = c_name + <span class="string">&quot;=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">示例： clearCookie(<span class="string">&#x27;username&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h4 id="先写这几个吧。。。"><a href="#先写这几个吧。。。" class="headerlink" title="先写这几个吧。。。"></a>先写这几个吧。。。</h4>]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>微信环境</tag>
        <tag>随机颜色</tag>
        <tag>分割数组，屏幕适配，Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>七种css方式让一个容器水平垂直居中</title>
    <url>/2017/11/27/%E4%B8%83%E7%A7%8Dcss%E6%96%B9%E5%BC%8F%E8%AE%A9%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h4 id="方法简述"><a href="#方法简述" class="headerlink" title="方法简述"></a>方法简述</h4><h5 id="方法一：position加margin"><a href="#方法一：position加margin" class="headerlink" title="方法一：position加margin"></a>方法一：position加margin</h5><h5 id="方法二：-diaplay-table-cell"><a href="#方法二：-diaplay-table-cell" class="headerlink" title="方法二： diaplay:table-cell"></a>方法二： diaplay:table-cell</h5><h5 id="方法三：position加-transform"><a href="#方法三：position加-transform" class="headerlink" title="方法三：position加 transform"></a>方法三：position加 transform</h5><h5 id="方法四：flex-align-items-center-justify-content-center"><a href="#方法四：flex-align-items-center-justify-content-center" class="headerlink" title="方法四：flex;align-items: center;justify-content: center"></a>方法四：flex;align-items: center;justify-content: center</h5><h5 id="方法五：display-flex-margin-auto"><a href="#方法五：display-flex-margin-auto" class="headerlink" title="方法五：display:flex;margin:auto"></a>方法五：display:flex;margin:auto</h5><h5 id="方法六：纯position"><a href="#方法六：纯position" class="headerlink" title="方法六：纯position"></a>方法六：纯position</h5><h5 id="方法七：兼容低版本浏览器，不固定宽高"><a href="#方法七：兼容低版本浏览器，不固定宽高" class="headerlink" title="方法七：兼容低版本浏览器，不固定宽高"></a>方法七：兼容低版本浏览器，不固定宽高</h5><span id="more"></span>

<h4 id="方法一：position加margin（由于display-table-cell的原因，IE6-7不兼容）"><a href="#方法一：position加margin（由于display-table-cell的原因，IE6-7不兼容）" class="headerlink" title="方法一：position加margin（由于display:table-cell的原因，IE6\7不兼容）"></a>方法一：position加margin（由于display:table-cell的原因，IE6\7不兼容）</h4><h5 id="html"><a href="#html" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h5 id="css"><a href="#css" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: yellow;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.wrap .center &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: green;</span><br><span class="line">    margin: auto;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法二：diaplay-table-cell（兼容性：由于display-table-cell的原因，IE6-7不兼容。）"><a href="#方法二：diaplay-table-cell（兼容性：由于display-table-cell的原因，IE6-7不兼容。）" class="headerlink" title="方法二：diaplay:table-cell（兼容性：由于display:table-cell的原因，IE6\7不兼容。）"></a>方法二：diaplay:table-cell（兼容性：由于display:table-cell的原因，IE6\7不兼容。）</h4><h5 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: yellow;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.center&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法三：position加transform（兼容性：ie9以下不支持transform，手机端表现的比较好。）"><a href="#方法三：position加transform（兼容性：ie9以下不支持transform，手机端表现的比较好。）" class="headerlink" title="方法三：position加transform（兼容性：ie9以下不支持transform，手机端表现的比较好。）"></a>方法三：position加transform（兼容性：ie9以下不支持transform，手机端表现的比较好。）</h4><h5 id="html-2"><a href="#html-2" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    background: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: green;</span><br><span class="line">    top:<span class="number">50</span>%;</span><br><span class="line">    left:<span class="number">50</span>%;</span><br><span class="line">    -webkit-transform:translate(-<span class="number">50</span>%,-<span class="number">50</span>%);</span><br><span class="line">    transform:translate(-<span class="number">50</span>%,-<span class="number">50</span>%);</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法四：flex-align-items-center-justify-content-center（移动端首选）"><a href="#方法四：flex-align-items-center-justify-content-center（移动端首选）" class="headerlink" title="方法四：flex;align-items:center;justify-content:center（移动端首选）"></a>方法四：flex;align-items:center;justify-content:center（移动端首选）</h4><h5 id="html-3"><a href="#html-3" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="css-3"><a href="#css-3" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">    background: green;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法五：display-flex-margin-auto（移动端首选）"><a href="#方法五：display-flex-margin-auto（移动端首选）" class="headerlink" title="方法五：display:flex;margin:auto（移动端首选）"></a>方法五：display:flex;margin:auto（移动端首选）</h4><h5 id="html-4"><a href="#html-4" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="css-4"><a href="#css-4" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.center &#123;</span><br><span class="line">    background: green;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法六：纯position-1"><a href="#方法六：纯position-1" class="headerlink" title="方法六：纯position"></a>方法六：纯position</h4><h5 id="html-5"><a href="#html-5" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;center&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="css-5"><a href="#css-5" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">// 方法一</span><br><span class="line">.center &#123;</span><br><span class="line">    background: green;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    left: 50px;</span><br><span class="line">    top: 50px;</span><br><span class="line">&#125;</span><br><span class="line">// 方法二</span><br><span class="line">.center &#123;</span><br><span class="line">    background: green;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    margin-left:-50px;</span><br><span class="line">    margin-top:-50px;</span><br><span class="line">&#125;</span><br><span class="line">兼容性：适用于所有浏览器</span><br><span class="line">方法六中的方法一计算公式如下：</span><br><span class="line">子元素（conter）的left值计算公式：left=(父元素的宽 - 子元素的宽 ) / <span class="number">2</span>=(<span class="number">200</span>-<span class="number">100</span>) / <span class="number">2</span>=50px;</span><br><span class="line">子元素（conter）的top值计算公式：top=(父元素的高 - 子元素的高 ) / <span class="number">2</span>=(<span class="number">200</span>-<span class="number">100</span>) / <span class="number">2</span>=50px;</span><br><span class="line">方法二计算公式：</span><br><span class="line">left值固定为<span class="number">50</span>%;</span><br><span class="line">子元素的margin-left= -（子元素的宽/<span class="number">2</span>）=-<span class="number">100</span>/<span class="number">2</span>= -50px;</span><br><span class="line">top值也一样，固定为<span class="number">50</span>%</span><br><span class="line">子元素的margin-top= -（子元素的高/<span class="number">2</span>）=-<span class="number">100</span>/<span class="number">2</span>= -50px;</span><br></pre></td></tr></table></figure>

<h4 id="方法七：兼容低版本浏览器，不固定宽高-1"><a href="#方法七：兼容低版本浏览器，不固定宽高-1" class="headerlink" title="方法七：兼容低版本浏览器，不固定宽高"></a>方法七：兼容低版本浏览器，不固定宽高</h4><h5 id="html-6"><a href="#html-6" class="headerlink" title="html"></a>html</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;tableCell&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">&quot;content&quot;</span>&gt;不固定宽高，自适应&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="css-6"><a href="#css-6" class="headerlink" title="css"></a>css</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.table &#123;</span><br><span class="line">    height: 200px; //高度值不能少</span><br><span class="line">    width: 200px; //宽度值不能少</span><br><span class="line">    display: table;</span><br><span class="line">    position: relative;</span><br><span class="line">    <span class="built_in">float</span>:left;</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.tableCell &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    text-align: center;</span><br><span class="line">    position: absolute;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br><span class="line">.content &#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    top: -<span class="number">50</span>%;</span><br><span class="line">    left: -<span class="number">50</span>%;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>居中</tag>
      </tags>
  </entry>
  <entry>
    <title>原生js实现上拉加载效果</title>
    <url>/2017/11/25/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h4 id="这是自己在实际项目中用原生实现的上拉加载效果，时间久了会忘记，就在这里记录下。。。"><a href="#这是自己在实际项目中用原生实现的上拉加载效果，时间久了会忘记，就在这里记录下。。。" class="headerlink" title="这是自己在实际项目中用原生实现的上拉加载效果，时间久了会忘记，就在这里记录下。。。"></a>这是自己在实际项目中用原生实现的上拉加载效果，时间久了会忘记，就在这里记录下。。。</h4><h5 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 放置列表的地方 --&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;remind-col&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div style=<span class="string">&quot;clear:both;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 底部提示文字及加载动画 --&gt;</span><br><span class="line">  &lt;div <span class="built_in">id</span>=<span class="string">&quot;pullUp&quot;</span>&gt;</span><br><span class="line">    &lt;span <span class="built_in">id</span>=<span class="string">&quot;pullUpIcon&quot;</span>&gt;&lt;/span&gt;&lt;span <span class="built_in">id</span>=<span class="string">&quot;pullUpLabel&quot;</span>&gt;上拉加载更多&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//商品推荐</span><br><span class="line">var counter = <span class="number">1</span>;</span><br><span class="line">// 每页展示<span class="number">6</span>个</span><br><span class="line">var num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">//首次展示的商品列表</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/shop/getDetailCommentGood&#x27;</span>,</span><br><span class="line">    <span class="keyword">async</span>:true,</span><br><span class="line">    dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        article_id:ID,</span><br><span class="line">        size:num,</span><br><span class="line">        page:counter</span><br><span class="line">    &#125;,</span><br><span class="line">    success:function(res)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.status == <span class="number">200</span>)&#123;</span><br><span class="line">            counter++;</span><br><span class="line">            document.getElementById(<span class="string">&#x27;goodsRec&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">            productList(res.data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//展示首次加载的商品列表</span><br><span class="line">function productList(res)&#123;</span><br><span class="line">   // console.log(res)</span><br><span class="line">   <span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">       var <span class="built_in">str</span> = <span class="string">&#x27;&lt;span class=&quot;market_price&quot;&gt;￥&#x27;</span>+ res[i].price +<span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">       <span class="keyword">if</span>(res[i].price == <span class="number">0</span> || res[i].price == res[i].discount_price)&#123;</span><br><span class="line">           <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       var temp = $(<span class="string">&#x27;&lt;div class=&quot;product&quot;&gt;&lt;a href=&quot;/shop/goodsDetail/?id=&#x27;</span>+ res[i].gid +<span class="string">&#x27;&quot;&gt;&lt;img src=&quot;&#x27;</span>+ res[i].goods_image +<span class="string">&#x27;&quot; class=&quot;img&quot;/&gt;&lt;p class=&quot;goodsname&quot;&gt;&#x27;</span>+ res[i].goods_name +<span class="string">&#x27;&lt;/p&gt;&lt;p class=&quot;goodspric&quot;&gt;&lt;span class=&quot;pricnum&quot;&gt;￥&#x27;</span>+ res[i].discount_price +<span class="string">&#x27;&lt;/span&gt;&#x27;</span>+ <span class="built_in">str</span> +<span class="string">&#x27;&lt;/p&gt;&lt;/a&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class="line">       $(<span class="string">&#x27;#list&#x27;</span>).append(temp);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 上拉加载更多商品</span><br><span class="line">var touchTop,wrap,pullUpLabel,pullUpIcon;</span><br><span class="line">var isBottom = true;</span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">    wrap = document.getElementById(<span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line">    // console.log(wrap)</span><br><span class="line">    pullUpIcon = document.getElementById(<span class="string">&#x27;pullUpIcon&#x27;</span>);</span><br><span class="line">    pullUpLabel = document.getElementById(<span class="string">&#x27;pullUpLabel&#x27;</span>);</span><br><span class="line">    $(wrap).on(<span class="string">&#x27;touchstart&#x27;</span>,function(e)&#123;</span><br><span class="line">        var t =e.targetTouches[<span class="number">0</span>];</span><br><span class="line">        touchTop = t.pageY;</span><br><span class="line">        console.log(<span class="string">&#x27;按下&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(wrap).on(<span class="string">&#x27;touchmove&#x27;</span>,function (e) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;移动&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isBottom)&#123;</span><br><span class="line">            var t =e.targetTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>((touchTop - t.pageY) &gt; <span class="number">10</span> &amp;&amp; window.innerHeight + window.scrollY &gt;= document.body.scrollHeight)&#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">                e.stopPropagation();</span><br><span class="line">                pullUpLabel.innerHTML = <span class="string">&#x27;松手开始加载&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pullUpLabel.innerHTML = <span class="string">&#x27;上拉加载更多&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(wrap).on(<span class="string">&#x27;touchend&#x27;</span>,function(e)&#123;</span><br><span class="line">        console.log(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(isBottom  &amp;&amp; window.innerHeight + window.scrollY &gt;= document.body.scrollHeight)&#123;</span><br><span class="line">            pullUpAction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 加载更多商品数据</span><br><span class="line">function pullUpAction () &#123;</span><br><span class="line">    pullUpIcon.className = <span class="string">&#x27;pullUpIcon&#x27;</span>;</span><br><span class="line">    pullUpLabel.innerHTML = <span class="string">&#x27;加载中&#x27;</span>;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;/shop/getDetailCommentGood&#x27;</span>,</span><br><span class="line">        <span class="keyword">async</span>:true,</span><br><span class="line">        dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            article_id:ID,</span><br><span class="line">            size:num,</span><br><span class="line">            page:counter</span><br><span class="line">        &#125;,</span><br><span class="line">        success:function(res)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.status == <span class="number">200</span>)&#123;</span><br><span class="line">                addProductList(res.data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 新增加的数据展示到页面上</span><br><span class="line">function addProductList(res)&#123;</span><br><span class="line">    var goods =res;</span><br><span class="line">    <span class="keyword">if</span>(res !=<span class="string">&#x27;&#x27;</span> &amp;&amp; res != null)&#123;</span><br><span class="line">        var <span class="built_in">list</span> = document.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">        var good_html = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        good_html.className=<span class="string">&quot;remind-col&quot;</span>;</span><br><span class="line">        var html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; goods.length; i++)&#123;</span><br><span class="line">            var <span class="built_in">str</span> = <span class="string">&#x27;&lt;span class=&quot;market_price&quot;&gt;￥&#x27;</span>+ goods[i].price +<span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(res[i].price == <span class="number">0</span> || goods[i].price == goods[i].discount_price)&#123;</span><br><span class="line">                <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            html += <span class="string">&#x27;&lt;div class=&quot;product&quot;&gt;&lt;a href=&quot;/shop/goodsDetail/?id=&#x27;</span>+ goods[i].gid +<span class="string">&#x27;&quot;&gt;&lt;img src=&quot;&#x27;</span>+ goods[i].goods_image +<span class="string">&#x27;&quot; class=&quot;img&quot;/&gt;&lt;p class=&quot;goodsname&quot;&gt;&#x27;</span>+ goods[i].goods_name +<span class="string">&#x27;&lt;/p&gt;&lt;p class=&quot;goodspric&quot;&gt;&lt;span class=&quot;pricnum&quot;&gt;￥&#x27;</span>+ goods[i].discount_price +<span class="string">&#x27;&lt;/span&gt;&#x27;</span>+ <span class="built_in">str</span> +<span class="string">&#x27;&lt;/p&gt;&lt;/a&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        good_html.innerHTML = html;</span><br><span class="line">        <span class="built_in">list</span>.appendChild(good_html,<span class="built_in">list</span>);</span><br><span class="line">        pullUpIcon.className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        pullUpLabel.innerHTML = <span class="string">&#x27;上拉加载更多&#x27;</span>;</span><br><span class="line">        // 设置图片</span><br><span class="line">        setTimeout(refreshHeight());</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        isBottom = false;</span><br><span class="line">        pullUpIcon.className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        pullUpLabel.innerHTML = <span class="string">&#x27;已显示全部内容&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function refreshHeight()&#123;</span><br><span class="line">    var images = document.getElementsByClassName(<span class="string">&#x27;goods_img&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(var i = <span class="number">0</span>; i&lt;images.length;i++)&#123;</span><br><span class="line">        var img = images[i];</span><br><span class="line">        img.height = img.width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>上拉加载</tag>
      </tags>
  </entry>
  <entry>
    <title>倒计时js封装</title>
    <url>/2017/12/04/%E5%80%92%E8%AE%A1%E6%97%B6js%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><h5 id="性能最优，闭包环境，可同时创建多个计时器"><a href="#性能最优，闭包环境，可同时创建多个计时器" class="headerlink" title="性能最优，闭包环境，可同时创建多个计时器"></a>性能最优，闭包环境，可同时创建多个计时器</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getNowFormatDate() &#123;</span><br><span class="line">    var date = new Date();</span><br><span class="line">    var seperator1 = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    var seperator2 = <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    var month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    var strDate = date.getDate();</span><br><span class="line">    <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        strDate = <span class="string">&quot;0&quot;</span> + strDate;</span><br><span class="line">    &#125;</span><br><span class="line">    var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate</span><br><span class="line">        + <span class="string">&quot; &quot;</span> + date.getHours() + seperator2 + date.getMinutes()</span><br><span class="line">        + seperator2 + date.getSeconds();</span><br><span class="line">    <span class="keyword">return</span> currentdate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function circulateTime(divname,t,timer) &#123;</span><br><span class="line">    var cc = document.getElementById(divname);</span><br><span class="line">//计时器变为<span class="number">0</span>要处理的动作</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">0</span>)&#123;</span><br><span class="line">        window.location.reload();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       window.clearInterval(timer);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    var h = Math.floor(t / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">    var m = Math.floor(t / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">    var s = Math.floor(t / <span class="number">1000</span> % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h &gt;= <span class="number">0</span> &amp;&amp; h &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        h = <span class="string">&quot;0&quot;</span> + h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt;= <span class="number">0</span> &amp;&amp; m &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        m = <span class="string">&quot;0&quot;</span> + m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= <span class="number">0</span> &amp;&amp; s &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line">    cc.innerHTML = <span class="string">&quot;&lt;font&gt;&quot;</span> + h + <span class="string">&quot;&lt;/font&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;font&gt;&quot;</span> + m + <span class="string">&quot;&lt;/font&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;font&gt;&quot;</span> + s + <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function ShowCountDown(date, divname) &#123;</span><br><span class="line">    var now_date = getNowFormatDate();</span><br><span class="line">    var EndTime = date.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    var NowTime = now_date.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    var t = new Date(EndTime).getTime() - new Date(NowTime).getTime();</span><br><span class="line">    var timer = window.setInterval(function () &#123;</span><br><span class="line">        t -= <span class="number">1000</span>;</span><br><span class="line">        circulateTime(divname,t,timer)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><h5 id="性能未优化每秒钟都取当前时间"><a href="#性能未优化每秒钟都取当前时间" class="headerlink" title="性能未优化每秒钟都取当前时间"></a>性能未优化每秒钟都取当前时间</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getNowFormatDate() &#123;</span><br><span class="line">    var date = new Date();</span><br><span class="line">    var seperator1 = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    var seperator2 = <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    var month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    var strDate = date.getDate();</span><br><span class="line">    <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        strDate = <span class="string">&quot;0&quot;</span> + strDate;</span><br><span class="line">    &#125;</span><br><span class="line">    var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate</span><br><span class="line">        + <span class="string">&quot; &quot;</span> + date.getHours() + seperator2 + date.getMinutes()</span><br><span class="line">        + seperator2 + date.getSeconds();</span><br><span class="line">    <span class="keyword">return</span> currentdate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function ShowCountDown(date, divname) &#123;</span><br><span class="line">    var now_date = getNowFormatDate();</span><br><span class="line">    var EndTime = date.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    var NowTime = now_date.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    var t = new Date(EndTime).getTime() - new Date(NowTime).getTime();</span><br><span class="line">    <span class="keyword">if</span> (t &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        document.getElementById(divname).style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)&#123;</span><br><span class="line">            window.location.reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var h = Math.floor(t / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">    var m = Math.floor(t / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">    var s = Math.floor(t / <span class="number">1000</span> % <span class="number">60</span>);</span><br><span class="line">    var cc = document.getElementById(divname);</span><br><span class="line">    <span class="keyword">if</span> (h &gt;= <span class="number">0</span> &amp;&amp; h &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        h = <span class="string">&quot;0&quot;</span> + h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt;= <span class="number">0</span> &amp;&amp; m &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        m = <span class="string">&quot;0&quot;</span> + m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= <span class="number">0</span> &amp;&amp; s &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line">    cc.innerHTML = <span class="string">&quot;&lt;font&gt;&quot;</span> + h + <span class="string">&quot;&lt;/font&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;font&gt;&quot;</span> + m + <span class="string">&quot;&lt;/font&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;font&gt;&quot;</span> + s + <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">window.setInterval(function () &#123;</span><br><span class="line">    ShowCountDown(end_time, <span class="string">&#x27;divdown1&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>倒计时</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目git工作流程</title>
    <url>/2017/12/05/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEgit%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="由于开源项目每天都有多次代码部署，工作流程会有些不一样，所以在这记录下，分享给第一次参与的小伙伴。"><a href="#由于开源项目每天都有多次代码部署，工作流程会有些不一样，所以在这记录下，分享给第一次参与的小伙伴。" class="headerlink" title="由于开源项目每天都有多次代码部署，工作流程会有些不一样，所以在这记录下，分享给第一次参与的小伙伴。"></a>由于开源项目每天都有多次代码部署，工作流程会有些不一样，所以在这记录下，分享给第一次参与的小伙伴。</h3><span id="more"></span>
<h4 id="1-开源项目都有一个公共的git仓库-upstream-，参与项目的每个小伙伴-Developer-都有一个服务器上的个人仓库-origin"><a href="#1-开源项目都有一个公共的git仓库-upstream-，参与项目的每个小伙伴-Developer-都有一个服务器上的个人仓库-origin" class="headerlink" title="1.开源项目都有一个公共的git仓库(upstream)，参与项目的每个小伙伴(Developer)都有一个服务器上的个人仓库(origin)"></a>1.开源项目都有一个公共的git仓库(upstream)，参与项目的每个小伙伴(Developer)都有一个服务器上的个人仓库(origin)</h4><h4 id="2-新参与项目的小伙伴需要首先fork项目，也就是把项目在服务器上创建一个自己的拷贝，这个仓库拷贝作为一个公开的个人仓库。"><a href="#2-新参与项目的小伙伴需要首先fork项目，也就是把项目在服务器上创建一个自己的拷贝，这个仓库拷贝作为一个公开的个人仓库。" class="headerlink" title="2.新参与项目的小伙伴需要首先fork项目，也就是把项目在服务器上创建一个自己的拷贝，这个仓库拷贝作为一个公开的个人仓库。"></a>2.新参与项目的小伙伴需要首先fork项目，也就是把项目在服务器上创建一个自己的拷贝，这个仓库拷贝作为一个公开的个人仓库。</h4><h4 id="3-在创建了自己服务端拷贝之后，执行clone自己公开仓库到本地机器上，作为私有的开发环境。"><a href="#3-在创建了自己服务端拷贝之后，执行clone自己公开仓库到本地机器上，作为私有的开发环境。" class="headerlink" title="3.在创建了自己服务端拷贝之后，执行clone自己公开仓库到本地机器上，作为私有的开发环境。"></a>3.在创建了自己服务端拷贝之后，执行clone自己公开仓库到本地机器上，作为私有的开发环境。</h4><h4 id="4-要提交本地修改时，push提交到自己公开仓库中而不是公共仓库中。-然后给公共仓库发起一个-Merge-Request，让参与项目的小伙伴们知道有更新已经准备好合并了。"><a href="#4-要提交本地修改时，push提交到自己公开仓库中而不是公共仓库中。-然后给公共仓库发起一个-Merge-Request，让参与项目的小伙伴们知道有更新已经准备好合并了。" class="headerlink" title="4.要提交本地修改时，push提交到自己公开仓库中而不是公共仓库中。 然后给公共仓库发起一个 Merge Request，让参与项目的小伙伴们知道有更新已经准备好合并了。"></a>4.要提交本地修改时，push提交到自己公开仓库中而不是公共仓库中。 然后给公共仓库发起一个 Merge Request，让参与项目的小伙伴们知道有更新已经准备好合并了。</h4><h4 id="5-Merge-Request也是我们进行Code-Review的地方，这里我们可以对Merge-Request作者作出的变更进行讨论。作者要根据讨论作出相应的修改和变更。"><a href="#5-Merge-Request也是我们进行Code-Review的地方，这里我们可以对Merge-Request作者作出的变更进行讨论。作者要根据讨论作出相应的修改和变更。" class="headerlink" title="5.Merge Request也是我们进行Code Review的地方，这里我们可以对Merge Request作者作出的变更进行讨论。作者要根据讨论作出相应的修改和变更。"></a>5.Merge Request也是我们进行Code Review的地方，这里我们可以对Merge Request作者作出的变更进行讨论。作者要根据讨论作出相应的修改和变更。</h4><h4 id="6-讨论结束后，代码作者要将Merge-Request-Assign给一名负责这个项目的小伙伴-Master-，负责项目的小伙伴根据Review情况确定是要Accept这个Merge-Request。"><a href="#6-讨论结束后，代码作者要将Merge-Request-Assign给一名负责这个项目的小伙伴-Master-，负责项目的小伙伴根据Review情况确定是要Accept这个Merge-Request。" class="headerlink" title="6.讨论结束后，代码作者要将Merge Request Assign给一名负责这个项目的小伙伴(Master)，负责项目的小伙伴根据Review情况确定是要Accept这个Merge Request。"></a>6.讨论结束后，代码作者要将Merge Request Assign给一名负责这个项目的小伙伴(Master)，负责项目的小伙伴根据Review情况确定是要Accept这个Merge Request。</h4><h4 id="7-Merge-Request被合并后就成为了项目的一部分，项目中其他的小伙伴应该执行pull操作将自己的本地仓库与公共仓库做同步。"><a href="#7-Merge-Request被合并后就成为了项目的一部分，项目中其他的小伙伴应该执行pull操作将自己的本地仓库与公共仓库做同步。" class="headerlink" title="7.Merge Request被合并后就成为了项目的一部分，项目中其他的小伙伴应该执行pull操作将自己的本地仓库与公共仓库做同步。"></a>7.Merge Request被合并后就成为了项目的一部分，项目中其他的小伙伴应该执行pull操作将自己的本地仓库与公共仓库做同步。</h4><hr>
<h3 id="举个例子-以下代码仓库是拿我公司仓库为例，需要VPN，所以大家不能测试"><a href="#举个例子-以下代码仓库是拿我公司仓库为例，需要VPN，所以大家不能测试" class="headerlink" title="举个例子(以下代码仓库是拿我公司仓库为例，需要VPN，所以大家不能测试)"></a>举个例子(以下代码仓库是拿我公司仓库为例，需要VPN，所以大家不能测试)</h3><h4 id="1-在GitLab中fork公共仓库到个人仓库并clone到本地开发环境-下面以server-x2F-mobile-git项目为例"><a href="#1-在GitLab中fork公共仓库到个人仓库并clone到本地开发环境-下面以server-x2F-mobile-git项目为例" class="headerlink" title="1.在GitLab中fork公共仓库到个人仓库并clone到本地开发环境 下面以server&#x2F;mobile.git项目为例"></a>1.在GitLab中fork公共仓库到个人仓库并clone到本地开发环境 下面以server&#x2F;mobile.git项目为例</h4><h5 id="a-访问项目公共仓库的-x67-x69-x74-x40-x67-105-x74-x6c-97-98-x2e-x6f-x63-x74-105-110-110-x2e-99-111-x6d-server-x2F-mobile-git-的GitLab页面-https-gitlab-octinn-com-server-mobile-点击页面中间按钮Fork，得到了服务器上个人仓库-x67-x69-x74-64-x67-105-x74-x6c-97-98-x2e-x6f-x63-x74-x69-110-110-46-x63-111-109-majiangtao-x2F-mobile-git"><a href="#a-访问项目公共仓库的-x67-x69-x74-x40-x67-105-x74-x6c-97-98-x2e-x6f-x63-x74-105-110-110-x2e-99-111-x6d-server-x2F-mobile-git-的GitLab页面-https-gitlab-octinn-com-server-mobile-点击页面中间按钮Fork，得到了服务器上个人仓库-x67-x69-x74-64-x67-105-x74-x6c-97-98-x2e-x6f-x63-x74-x69-110-110-46-x63-111-109-majiangtao-x2F-mobile-git" class="headerlink" title="a.访问项目公共仓库的&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x6c;&#97;&#98;&#x2e;&#x6f;&#x63;&#x74;&#105;&#110;&#110;&#x2e;&#99;&#111;&#x6d;:server&#x2F;mobile.git 的GitLab页面 https://gitlab.octinn.com/server/mobile 点击页面中间按钮Fork，得到了服务器上个人仓库 &#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x6c;&#97;&#98;&#x2e;&#x6f;&#x63;&#x74;&#x69;&#110;&#110;&#46;&#x63;&#111;&#109;:majiangtao&#x2F;mobile.git"></a>a.访问项目公共仓库的<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x6c;&#97;&#98;&#x2e;&#x6f;&#x63;&#x74;&#105;&#110;&#110;&#x2e;&#99;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x6c;&#97;&#98;&#x2e;&#x6f;&#x63;&#x74;&#105;&#110;&#110;&#x2e;&#99;&#111;&#x6d;</a>:server&#x2F;mobile.git 的GitLab页面 <a href="https://gitlab.octinn.com/server/mobile">https://gitlab.octinn.com/server/mobile</a> 点击页面中间按钮Fork，得到了服务器上个人仓库 <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x6c;&#97;&#98;&#x2e;&#x6f;&#x63;&#x74;&#x69;&#110;&#110;&#46;&#x63;&#111;&#109;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x6c;&#97;&#98;&#x2e;&#x6f;&#x63;&#x74;&#x69;&#110;&#110;&#46;&#x63;&#111;&#109;</a>:majiangtao&#x2F;mobile.git</h5><h5 id="b-在你本地开发机上-执行-git-clone-x67-105-x74-x40-x67-105-116-x6c-x61-x62-46-111-x63-x74-105-110-110-x2e-x63-x6f-109-server-x2F-mobile-git-将服务器上的公共仓库clone到本地"><a href="#b-在你本地开发机上-执行-git-clone-x67-105-x74-x40-x67-105-116-x6c-x61-x62-46-111-x63-x74-105-110-110-x2e-x63-x6f-109-server-x2F-mobile-git-将服务器上的公共仓库clone到本地" class="headerlink" title="b.在你本地开发机上 执行 git clone &#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#111;&#x63;&#x74;&#105;&#110;&#110;&#x2e;&#x63;&#x6f;&#109;:server&#x2F;mobile.git 将服务器上的公共仓库clone到本地"></a>b.在你本地开发机上 执行 git clone <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#111;&#x63;&#x74;&#105;&#110;&#110;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#111;&#x63;&#x74;&#105;&#110;&#110;&#x2e;&#x63;&#x6f;&#109;</a>:server&#x2F;mobile.git 将服务器上的公共仓库clone到本地</h5><h5 id="c-在你本地开发机上-执行-git-remote-set-url-–push-origin-x67-105-x74-x40-103-105-116-x6c-x61-x62-46-111-x63-116-105-x6e-x6e-46-x63-x6f-109-majiangtao-x2F-mobile-git-将本地remote的push地址为修改个人项目远程仓库的地址"><a href="#c-在你本地开发机上-执行-git-remote-set-url-–push-origin-x67-105-x74-x40-103-105-116-x6c-x61-x62-46-111-x63-116-105-x6e-x6e-46-x63-x6f-109-majiangtao-x2F-mobile-git-将本地remote的push地址为修改个人项目远程仓库的地址" class="headerlink" title="c.在你本地开发机上 执行 git remote set-url –push origin &#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#111;&#x63;&#116;&#105;&#x6e;&#x6e;&#46;&#x63;&#x6f;&#109;:majiangtao&#x2F;mobile.git 将本地remote的push地址为修改个人项目远程仓库的地址"></a>c.在你本地开发机上 执行 git remote set-url –push origin <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#111;&#x63;&#116;&#105;&#x6e;&#x6e;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x6c;&#x61;&#x62;&#46;&#111;&#x63;&#116;&#105;&#x6e;&#x6e;&#46;&#x63;&#x6f;&#109;</a>:majiangtao&#x2F;mobile.git 将本地remote的push地址为修改个人项目远程仓库的地址</h5><h5 id="d-上述步骤执行完成厚-git-remote-v的输出应该类似"><a href="#d-上述步骤执行完成厚-git-remote-v的输出应该类似" class="headerlink" title="d.上述步骤执行完成厚 git remote -v的输出应该类似:"></a>d.上述步骤执行完成厚 git remote -v的输出应该类似:</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin git@gitlab.octinn.com:majiangtao/mobile.git (push)</span><br><span class="line">origin git@gitlab.octinn.com:server/mobile.git (fetch)</span><br></pre></td></tr></table></figure>
<h4 id="2-在开始修改代码前，要根据需求创建一个新分支，这里并不区分是功能分支还是补丁分支。后面会用这个分支作为Merge-Request的源分支。"><a href="#2-在开始修改代码前，要根据需求创建一个新分支，这里并不区分是功能分支还是补丁分支。后面会用这个分支作为Merge-Request的源分支。" class="headerlink" title="2.在开始修改代码前，要根据需求创建一个新分支，这里并不区分是功能分支还是补丁分支。后面会用这个分支作为Merge Request的源分支。"></a>2.在开始修改代码前，要根据需求创建一个新分支，这里并不区分是功能分支还是补丁分支。后面会用这个分支作为Merge Request的源分支。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git checkout -b some-feature</span><br><span class="line">// 编辑代码</span><br><span class="line">git commit -a -m <span class="string">&quot;Add first draft of some feature&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="在新功能分支上，可能按需要添加提交。如果觉得功能分支上的提交历史太乱了，可以用rebase-i来整理历史提交。-对于大型项目，整理功能分支的历史可以让其他人更容易看出在Merge-Request中做了什么内容。在把代码push到个人仓库中之前，所有的变更都是完全私有的。这时如果公共仓库有了其他的提交，可以通过git-pull来更新。"><a href="#在新功能分支上，可能按需要添加提交。如果觉得功能分支上的提交历史太乱了，可以用rebase-i来整理历史提交。-对于大型项目，整理功能分支的历史可以让其他人更容易看出在Merge-Request中做了什么内容。在把代码push到个人仓库中之前，所有的变更都是完全私有的。这时如果公共仓库有了其他的提交，可以通过git-pull来更新。" class="headerlink" title="在新功能分支上，可能按需要添加提交。如果觉得功能分支上的提交历史太乱了，可以用rebase -i来整理历史提交。 对于大型项目，整理功能分支的历史可以让其他人更容易看出在Merge Request中做了什么内容。在把代码push到个人仓库中之前，所有的变更都是完全私有的。这时如果公共仓库有了其他的提交，可以通过git pull来更新。"></a>在新功能分支上，可能按需要添加提交。如果觉得功能分支上的提交历史太乱了，可以用rebase -i来整理历史提交。 对于大型项目，整理功能分支的历史可以让其他人更容易看出在Merge Request中做了什么内容。在把代码push到个人仓库中之前，所有的变更都是完全私有的。这时如果公共仓库有了其他的提交，可以通过git pull来更新。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<h4 id="因为所有的开发工作都是在特定分支里进行的，理论上这个动作只会产生一次快进；如果这里产生了冲突，请自行解决冲突。"><a href="#因为所有的开发工作都是在特定分支里进行的，理论上这个动作只会产生一次快进；如果这里产生了冲突，请自行解决冲突。" class="headerlink" title="因为所有的开发工作都是在特定分支里进行的，理论上这个动作只会产生一次快进；如果这里产生了冲突，请自行解决冲突。"></a>因为所有的开发工作都是在特定分支里进行的，理论上这个动作只会产生一次快进；如果这里产生了冲突，<a href="https://www.jetbrains.com/help/idea/resolving-conflicts.html">请自行解决冲突</a>。</h4><h4 id="3-新分支开发完成后，或需要讨论的时候，push功能到自己的个人仓库中（不是公共仓库）"><a href="#3-新分支开发完成后，或需要讨论的时候，push功能到自己的个人仓库中（不是公共仓库）" class="headerlink" title="3.新分支开发完成后，或需要讨论的时候，push功能到自己的个人仓库中（不是公共仓库）"></a>3.新分支开发完成后，或需要讨论的时候，push功能到自己的个人仓库中（不是公共仓库）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git push origin some-branch</span><br></pre></td></tr></table></figure>

<h4 id="4-发起Merge-Request并邀请其他小伙伴做Code-Review"><a href="#4-发起Merge-Request并邀请其他小伙伴做Code-Review" class="headerlink" title="4.发起Merge Request并邀请其他小伙伴做Code Review"></a>4.发起Merge Request并邀请其他小伙伴做Code Review</h4><h5 id="a-访问个人仓库的GitLab页面-https-git-gitlab-octinn-com-majiangtao-mobile-git"><a href="#a-访问个人仓库的GitLab页面-https-git-gitlab-octinn-com-majiangtao-mobile-git" class="headerlink" title="a.访问个人仓库的GitLab页面  https://git@gitlab.octinn.com:majiangtao/mobile.git"></a>a.访问个人仓库的GitLab页面  <a href="https://git@gitlab.octinn.com:majiangtao/mobile.git">https://git@gitlab.octinn.com:majiangtao/mobile.git</a></h5><h5 id="b-常规情况下页面上方会出现一个按钮提示你发起Merge-Request，如果没有，也不要慌张，页面右边导航有“Merge-Requests”菜单-点进去有”-New-Merge-Request”按钮，点击可以创建新的Merge-Request。"><a href="#b-常规情况下页面上方会出现一个按钮提示你发起Merge-Request，如果没有，也不要慌张，页面右边导航有“Merge-Requests”菜单-点进去有”-New-Merge-Request”按钮，点击可以创建新的Merge-Request。" class="headerlink" title="b.常规情况下页面上方会出现一个按钮提示你发起Merge Request，如果没有，也不要慌张，页面右边导航有“Merge Requests”菜单 点进去有”+New Merge Request”按钮，点击可以创建新的Merge Request。"></a>b.常规情况下页面上方会出现一个按钮提示你发起Merge Request，如果没有，也不要慌张，页面右边导航有“Merge Requests”菜单 点进去有”+New Merge Request”按钮，点击可以创建新的Merge Request。</h5><h5 id="c-在创建Merge-Request的表单中-添加自己的个人仓库为源仓库，新的特性分支为源分支，公共仓库为目标仓库，公共仓库的master为目标分支。"><a href="#c-在创建Merge-Request的表单中-添加自己的个人仓库为源仓库，新的特性分支为源分支，公共仓库为目标仓库，公共仓库的master为目标分支。" class="headerlink" title="c.在创建Merge Request的表单中 添加自己的个人仓库为源仓库，新的特性分支为源分支，公共仓库为目标仓库，公共仓库的master为目标分支。"></a>c.在创建Merge Request的表单中 添加自己的个人仓库为源仓库，新的特性分支为源分支，公共仓库为目标仓库，公共仓库的master为目标分支。</h5><h5 id="d-确定源仓库、源分支、目标仓库、目标分支无误的情况下查看Changes确定变更的内容，填写Merge-Request的标题-Title-和描述-Description-，标题和描述应该清晰明了的解释这个Merge-Request做了什么，也可以给一些提示信息，以便于做Review的小伙伴知道这是要干啥。"><a href="#d-确定源仓库、源分支、目标仓库、目标分支无误的情况下查看Changes确定变更的内容，填写Merge-Request的标题-Title-和描述-Description-，标题和描述应该清晰明了的解释这个Merge-Request做了什么，也可以给一些提示信息，以便于做Review的小伙伴知道这是要干啥。" class="headerlink" title="d.确定源仓库、源分支、目标仓库、目标分支无误的情况下查看Changes确定变更的内容，填写Merge Request的标题(Title)和描述(Description)，标题和描述应该清晰明了的解释这个Merge Request做了什么，也可以给一些提示信息，以便于做Review的小伙伴知道这是要干啥。"></a>d.确定源仓库、源分支、目标仓库、目标分支无误的情况下查看Changes确定变更的内容，填写Merge Request的标题(Title)和描述(Description)，标题和描述应该清晰明了的解释这个Merge Request做了什么，也可以给一些提示信息，以便于做Review的小伙伴知道这是要干啥。</h5><h4 id="5-Review-Merge-Request"><a href="#5-Review-Merge-Request" class="headerlink" title="5.Review Merge Request"></a>5.Review Merge Request</h4><h5 id="a-在我们在参与的项目GitLab页面中可以看到这个项目所有人发起的Merge-Requests-，点击每个Merge-Request会显示出描述、功能的提交历史和每个变更的差异-diff-，参与Review的小伙伴就可以在这里发表意见了。"><a href="#a-在我们在参与的项目GitLab页面中可以看到这个项目所有人发起的Merge-Requests-，点击每个Merge-Request会显示出描述、功能的提交历史和每个变更的差异-diff-，参与Review的小伙伴就可以在这里发表意见了。" class="headerlink" title="a.在我们在参与的项目GitLab页面中可以看到这个项目所有人发起的Merge Requests ，点击每个Merge Request会显示出描述、功能的提交历史和每个变更的差异(diff)，参与Review的小伙伴就可以在这里发表意见了。"></a>a.在我们在参与的项目GitLab页面中可以看到这个项目所有人发起的Merge Requests ，点击每个Merge Request会显示出描述、功能的提交历史和每个变更的差异(diff)，参与Review的小伙伴就可以在这里发表意见了。</h5><h5 id="b-如果你发现了代码中的问题，请留下具体的信息-x2F-改进的意见，并要求作者在合并前修复问题。"><a href="#b-如果你发现了代码中的问题，请留下具体的信息-x2F-改进的意见，并要求作者在合并前修复问题。" class="headerlink" title="b.如果你发现了代码中的问题，请留下具体的信息&#x2F;改进的意见，并要求作者在合并前修复问题。"></a>b.如果你发现了代码中的问题，请留下具体的信息&#x2F;改进的意见，并要求作者在合并前修复问题。</h5><h5 id="c-评论可以针对整个Merge-Request，也可以针对其中的某一次Commit，或针对变更中的某一行或一块儿代码片段。"><a href="#c-评论可以针对整个Merge-Request，也可以针对其中的某一次Commit，或针对变更中的某一行或一块儿代码片段。" class="headerlink" title="c.评论可以针对整个Merge Request，也可以针对其中的某一次Commit，或针对变更中的某一行或一块儿代码片段。"></a>c.评论可以针对整个Merge Request，也可以针对其中的某一次Commit，或针对变更中的某一行或一块儿代码片段。</h5><h5 id="d-Code-Review不应该成为保证代码风格和编码标准的手段。编码风格和代码规范都属于死的东西，每个程序员在把自己的代码提交团队Review的时候，代码就应该是符合规范的，这是默认值，属于每个人自己的事情，不应该交由团队来完成，否则只会浪费大家本来就不够的时间，有很多工具可以帮我们完成这件事。"><a href="#d-Code-Review不应该成为保证代码风格和编码标准的手段。编码风格和代码规范都属于死的东西，每个程序员在把自己的代码提交团队Review的时候，代码就应该是符合规范的，这是默认值，属于每个人自己的事情，不应该交由团队来完成，否则只会浪费大家本来就不够的时间，有很多工具可以帮我们完成这件事。" class="headerlink" title="d.Code Review不应该成为保证代码风格和编码标准的手段。编码风格和代码规范都属于死的东西，每个程序员在把自己的代码提交团队Review的时候，代码就应该是符合规范的，这是默认值，属于每个人自己的事情，不应该交由团队来完成，否则只会浪费大家本来就不够的时间，有很多工具可以帮我们完成这件事。"></a>d.Code Review不应该成为保证代码风格和编码标准的手段。编码风格和代码规范都属于死的东西，每个程序员在把自己的代码提交团队Review的时候，代码就应该是符合规范的，这是默认值，属于每个人自己的事情，不应该交由团队来完成，否则只会浪费大家本来就不够的时间，有很多工具可以帮我们完成这件事。</h5><h5 id="e-Code-Review不应该承担发现代码错误的职责。Code-Review主要是审核代码的质量，如可读性，可维护性，以及程序的逻辑和对需求和设计的实现。"><a href="#e-Code-Review不应该承担发现代码错误的职责。Code-Review主要是审核代码的质量，如可读性，可维护性，以及程序的逻辑和对需求和设计的实现。" class="headerlink" title="e.Code Review不应该承担发现代码错误的职责。Code Review主要是审核代码的质量，如可读性，可维护性，以及程序的逻辑和对需求和设计的实现。"></a>e.Code Review不应该承担发现代码错误的职责。Code Review主要是审核代码的质量，如可读性，可维护性，以及程序的逻辑和对需求和设计的实现。</h5><h5 id="f-Code-Review的实质是确认代码能够正确的运行，发现安全漏洞、功能错误、代码错误、设计失误、安全验证和防范、恶意代码等。"><a href="#f-Code-Review的实质是确认代码能够正确的运行，发现安全漏洞、功能错误、代码错误、设计失误、安全验证和防范、恶意代码等。" class="headerlink" title="f.Code Review的实质是确认代码能够正确的运行，发现安全漏洞、功能错误、代码错误、设计失误、安全验证和防范、恶意代码等。"></a>f.Code Review的实质是确认代码能够正确的运行，发现安全漏洞、功能错误、代码错误、设计失误、安全验证和防范、恶意代码等。</h5><h5 id="g-Code-Review的重点应该放在高风险的代码和容易引起高风险的修改或者重构的代码上。旧而复杂、处理敏感数据、处理重要业务逻辑和流程、大规模重构以及刚加入团队的开发者实现的代码都是审查的重点。"><a href="#g-Code-Review的重点应该放在高风险的代码和容易引起高风险的修改或者重构的代码上。旧而复杂、处理敏感数据、处理重要业务逻辑和流程、大规模重构以及刚加入团队的开发者实现的代码都是审查的重点。" class="headerlink" title="g.Code Review的重点应该放在高风险的代码和容易引起高风险的修改或者重构的代码上。旧而复杂、处理敏感数据、处理重要业务逻辑和流程、大规模重构以及刚加入团队的开发者实现的代码都是审查的重点。"></a>g.Code Review的重点应该放在高风险的代码和容易引起高风险的修改或者重构的代码上。旧而复杂、处理敏感数据、处理重要业务逻辑和流程、大规模重构以及刚加入团队的开发者实现的代码都是审查的重点。</h5><h5 id="h-确定不能通过Review的Merge-Request包括但不限于产生了冲突、语法错误、重大的逻辑缺陷等。"><a href="#h-确定不能通过Review的Merge-Request包括但不限于产生了冲突、语法错误、重大的逻辑缺陷等。" class="headerlink" title="h.确定不能通过Review的Merge Request包括但不限于产生了冲突、语法错误、重大的逻辑缺陷等。"></a>h.确定不能通过Review的Merge Request包括但不限于产生了冲突、语法错误、重大的逻辑缺陷等。</h5><h5 id="i-在Review之后需要留下你的意见，如果Review通过，请留下评论”lgtm”-looks-good-to-me-；如果不通过，也请在评论中留下理由。"><a href="#i-在Review之后需要留下你的意见，如果Review通过，请留下评论”lgtm”-looks-good-to-me-；如果不通过，也请在评论中留下理由。" class="headerlink" title="i.在Review之后需要留下你的意见，如果Review通过，请留下评论”lgtm”(looks good to me)；如果不通过，也请在评论中留下理由。"></a>i.在Review之后需要留下你的意见，如果Review通过，请留下评论”lgtm”(looks good to me)；如果不通过，也请在评论中留下理由。</h5><h4 id="6-补加提交和再次Review"><a href="#6-补加提交和再次Review" class="headerlink" title="6.补加提交和再次Review"></a>6.补加提交和再次Review</h4><h5 id="a-如果Merge-Request作者对反馈有任何疑问，可以在Merge-Request中响应，把Merge-Request当作是论坛用就可以。"><a href="#a-如果Merge-Request作者对反馈有任何疑问，可以在Merge-Request中响应，把Merge-Request当作是论坛用就可以。" class="headerlink" title="a.如果Merge Request作者对反馈有任何疑问，可以在Merge Request中响应，把Merge Request当作是论坛用就可以。"></a>a.如果Merge Request作者对反馈有任何疑问，可以在Merge Request中响应，把Merge Request当作是论坛用就可以。</h5><h5 id="b-在Merge-Request被Accept或Close之前，Merge-Request的作者可以再次提交代码并push到个人仓库，就像上一轮中的做法一样。这些新的提交会自动进入Merge-Request，其他小伙伴可以再次review变更。"><a href="#b-在Merge-Request被Accept或Close之前，Merge-Request的作者可以再次提交代码并push到个人仓库，就像上一轮中的做法一样。这些新的提交会自动进入Merge-Request，其他小伙伴可以再次review变更。" class="headerlink" title="b.在Merge Request被Accept或Close之前，Merge Request的作者可以再次提交代码并push到个人仓库，就像上一轮中的做法一样。这些新的提交会自动进入Merge Request，其他小伙伴可以再次review变更。"></a>b.在Merge Request被Accept或Close之前，Merge Request的作者可以再次提交代码并push到个人仓库，就像上一轮中的做法一样。这些新的提交会自动进入Merge Request，其他小伙伴可以再次review变更。</h5><h5 id="c-重复上述步骤直到Review被至少两位小伙伴通过。"><a href="#c-重复上述步骤直到Review被至少两位小伙伴通过。" class="headerlink" title="c.重复上述步骤直到Review被至少两位小伙伴通过。"></a>c.重复上述步骤直到Review被至少两位小伙伴通过。</h5><h5 id="d-Merge-Request的作者将Merge-Request-Assign给负责项目的小伙伴-Master-。"><a href="#d-Merge-Request的作者将Merge-Request-Assign给负责项目的小伙伴-Master-。" class="headerlink" title="d.Merge Request的作者将Merge Request Assign给负责项目的小伙伴(Master)。"></a>d.Merge Request的作者将Merge Request Assign给负责项目的小伙伴(Master)。</h5><h4 id="7-Accept-Merge-Request"><a href="#7-Accept-Merge-Request" class="headerlink" title="7.Accept Merge Request"></a>7.Accept Merge Request</h4><h5 id="a-负责项目的小伙伴-Master-根据Review情况确定是要Accept还是Close这个Merge-Request。"><a href="#a-负责项目的小伙伴-Master-根据Review情况确定是要Accept还是Close这个Merge-Request。" class="headerlink" title="a.负责项目的小伙伴(Master)根据Review情况确定是要Accept还是Close这个Merge Request。"></a>a.负责项目的小伙伴(Master)根据Review情况确定是要Accept还是Close这个Merge Request。</h5><h4 id="8-从公共仓库同步代码"><a href="#8-从公共仓库同步代码" class="headerlink" title="8.从公共仓库同步代码"></a>8.从公共仓库同步代码</h4><h4 id="公共仓库中的代码会不停的更新，其他人必须主动从公共仓库同步代码："><a href="#公共仓库中的代码会不停的更新，其他人必须主动从公共仓库同步代码：" class="headerlink" title="公共仓库中的代码会不停的更新，其他人必须主动从公共仓库同步代码："></a>公共仓库中的代码会不停的更新，其他人必须主动从公共仓库同步代码：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众平台本地存储被清除问题</title>
    <url>/2018/03/29/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%A2%AB%E6%B8%85%E9%99%A4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="解决微信公众平台本地存储数据后被清除问题"><a href="#解决微信公众平台本地存储数据后被清除问题" class="headerlink" title="解决微信公众平台本地存储数据后被清除问题"></a>解决微信公众平台本地存储数据后被清除问题</h3><h4 id="问题场景描述：开发的基于微信公众平台项目，需要推送模板信息，打开模板信息后进入指定页面-用A代替-，进入A页面首先会检测是否是登录状态，如果不是会把当前进入的页面路径记录在localStorage里，然后进入首页，从微信的链接获取code等数据来换取token，然后取localStorage里的页面路径再次跳转到A页面。但发现微信获取code后localStorage里的数据就被清除了，网上也有好多类似的问题，但说是用cookie就能完美解决问题，经过本人测试，发现并不能解决问题，数据依然会被清理掉。"><a href="#问题场景描述：开发的基于微信公众平台项目，需要推送模板信息，打开模板信息后进入指定页面-用A代替-，进入A页面首先会检测是否是登录状态，如果不是会把当前进入的页面路径记录在localStorage里，然后进入首页，从微信的链接获取code等数据来换取token，然后取localStorage里的页面路径再次跳转到A页面。但发现微信获取code后localStorage里的数据就被清除了，网上也有好多类似的问题，但说是用cookie就能完美解决问题，经过本人测试，发现并不能解决问题，数据依然会被清理掉。" class="headerlink" title="问题场景描述：开发的基于微信公众平台项目，需要推送模板信息，打开模板信息后进入指定页面(用A代替)，进入A页面首先会检测是否是登录状态，如果不是会把当前进入的页面路径记录在localStorage里，然后进入首页，从微信的链接获取code等数据来换取token，然后取localStorage里的页面路径再次跳转到A页面。但发现微信获取code后localStorage里的数据就被清除了，网上也有好多类似的问题，但说是用cookie就能完美解决问题，经过本人测试，发现并不能解决问题，数据依然会被清理掉。"></a>问题场景描述：开发的基于微信公众平台项目，需要推送模板信息，打开模板信息后进入指定页面(用A代替)，进入A页面首先会检测是否是登录状态，如果不是会把当前进入的页面路径记录在localStorage里，然后进入首页，从微信的链接获取code等数据来换取token，然后取localStorage里的页面路径再次跳转到A页面。但发现微信获取code后localStorage里的数据就被清除了，网上也有好多类似的问题，但说是用cookie就能完美解决问题，经过本人测试，发现并不能解决问题，数据依然会被清理掉。</h4><span id="more"></span>

<h4 id="最终解决方案：在进入A页面的时候，依然用localStorage把当前页面路径存储下，然后在获取code前把存储的页面路径取出来，拼接在获取code的’state’参数中-注意state参数的位置，附上微信网页授权的链接-，拿到code的同时把你之前回调的参数再用localStorage存储下，这样你之前的页面路径就保存下来了，就可以再次跳转进入A页面。"><a href="#最终解决方案：在进入A页面的时候，依然用localStorage把当前页面路径存储下，然后在获取code前把存储的页面路径取出来，拼接在获取code的’state’参数中-注意state参数的位置，附上微信网页授权的链接-，拿到code的同时把你之前回调的参数再用localStorage存储下，这样你之前的页面路径就保存下来了，就可以再次跳转进入A页面。" class="headerlink" title="最终解决方案：在进入A页面的时候，依然用localStorage把当前页面路径存储下，然后在获取code前把存储的页面路径取出来，拼接在获取code的’state’参数中(注意state参数的位置，附上微信网页授权的链接)，拿到code的同时把你之前回调的参数再用localStorage存储下，这样你之前的页面路径就保存下来了，就可以再次跳转进入A页面。"></a>最终解决方案：在进入A页面的时候，依然用localStorage把当前页面路径存储下，然后在获取code前把存储的页面路径取出来，拼接在获取code的’state’参数中(注意state参数的位置，附上<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842">微信网页授权的链接</a>)，拿到code的同时把你之前回调的参数再用localStorage存储下，这样你之前的页面路径就保存下来了，就可以再次跳转进入A页面。</h4><h4 id="贴下我的代码-vue项目，我的localStorage是封装的，你只要换成原生的就行-："><a href="#贴下我的代码-vue项目，我的localStorage是封装的，你只要换成原生的就行-：" class="headerlink" title="贴下我的代码(vue项目，我的localStorage是封装的，你只要换成原生的就行)："></a>贴下我的代码(vue项目，我的localStorage是封装的，你只要换成原生的就行)：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A页面处理</span><br><span class="line"></span><br><span class="line">mounted ()&#123;</span><br><span class="line">    // 先判断是否是推送进来的</span><br><span class="line">    <span class="keyword">if</span>(App.queryHref(<span class="string">&#x27;source&#x27;</span>)) &#123;</span><br><span class="line">    // 存储当前页面的路径</span><br><span class="line">      App.ls.<span class="built_in">set</span>(<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;certification&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    // 判断是否是登录状态</span><br><span class="line">    <span class="keyword">if</span>(!api.getHeaderToken()) &#123;</span><br><span class="line">      App.historyGo(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首页的处理</span><br><span class="line"></span><br><span class="line">created () &#123;</span><br><span class="line">    var code = App.queryHref(&#x27;code&#x27;);</span><br><span class="line">    // 回调参数</span><br><span class="line">    var state = App.queryHref(&#x27;state&#x27;);</span><br><span class="line">    if(this.isWeixn()) &#123;</span><br><span class="line">      // 从A进入首页时没有code会走else，走完else后会再次进如首页，此时才会走有code条件</span><br><span class="line">      if(code) &#123;</span><br><span class="line">        // 如果回调有参数，把参数存在本地</span><br><span class="line">        if(state === &#x27;certification&#x27;) &#123;</span><br><span class="line">          App.ls.set(&#x27;source&#x27;,&#x27;certification&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        // 拿到code调用方法获取token</span><br><span class="line">        this.initData(code)</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        if(App.ls.get(&#x27;source&#x27;) === &#x27;certification&#x27;) &#123;</span><br><span class="line">          location.href = &#x27;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxdf54eab251909cb8&amp;response_type=code&amp;scope=snsapi_base&amp;redirect_uri=http%3A%2F%2Fe.shengri.cn%2F&amp;connect_redirect=1&amp;state=certification#wechat_redirect&#x27;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">          location.href = &#x27;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxdf54eab251909cb8&amp;response_type=code&amp;scope=snsapi_base&amp;redirect_uri=http%3A%2F%2Fe.shengri.cn%2F&amp;connect_redirect=1#wechat_redirect&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      App.historyGo(&#x27;register&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">处理完事情之后，跳转到指定页面</span><br><span class="line"></span><br><span class="line">if(App.ls.get(&#x27;source&#x27;) === &quot;certification&quot;) &#123;</span><br><span class="line">    App.ls.remove(&#x27;source&#x27;)</span><br><span class="line">    App.historyGo(&#x27;certification&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微信公众平台</category>
      </categories>
      <tags>
        <tag>微信公众平台</tag>
        <tag>localStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>时间戳转换为普通日期格式</title>
    <url>/2017/11/28/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%99%AE%E9%80%9A%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="时间戳转换为普通日期格式"><a href="#时间戳转换为普通日期格式" class="headerlink" title="时间戳转换为普通日期格式"></a>时间戳转换为普通日期格式</h3><h4 id="第一种（格式：2010-x2F-12-x2F-23-上午10-53）"><a href="#第一种（格式：2010-x2F-12-x2F-23-上午10-53）" class="headerlink" title="第一种（格式：2010&#x2F;12&#x2F;23 上午10:53）"></a>第一种（格式：2010&#x2F;12&#x2F;23 上午10:53）</h4><h5 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getLocalTime(nS) &#123;</span><br><span class="line">   <span class="keyword">return</span> new Date(parseInt(nS) * <span class="number">1000</span>).toLocaleString().replace(/:\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$/,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(getLocalTime(<span class="number">1293072805</span>));</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="B"><a href="#B" class="headerlink" title="B:"></a>B:</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getLocalTime(nS) &#123;</span><br><span class="line">    <span class="keyword">return</span> new Date(parseInt(nS) * <span class="number">1000</span>).toLocaleString().substr(<span class="number">0</span>,<span class="number">17</span>)&#125;</span><br><span class="line">alert(getLocalTime(<span class="number">1293072805</span>));</span><br></pre></td></tr></table></figure>

<h4 id="第二种（格式：2070-1-15-13-56-39）"><a href="#第二种（格式：2070-1-15-13-56-39）" class="headerlink" title="第二种（格式：2070-1-15 13:56:39）"></a>第二种（格式：2070-1-15 13:56:39）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function formatDate(time) &#123;</span><br><span class="line">  var now =new Date(time);</span><br><span class="line">  var year=now.getFullYear();</span><br><span class="line">  var month=now.getMonth()+<span class="number">1</span>;</span><br><span class="line">  var date=now.getDate();</span><br><span class="line">  var hour=now.getHours();</span><br><span class="line">  var minute=now.getMinutes();</span><br><span class="line">  var second=now.getSeconds();</span><br><span class="line">  <span class="keyword">return</span> year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+date+<span class="string">&quot; &quot;</span>+hour+<span class="string">&quot;:&quot;</span>+minute+<span class="string">&quot;:&quot;</span>+second;</span><br><span class="line">&#125;</span><br><span class="line">alert(formatDate(<span class="number">1230999938</span>));</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>时间戳</tag>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器搭建Node.js环境</title>
    <url>/2023/02/22/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BANode-js%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="linux云服务器安装node-js的方法："><a href="#linux云服务器安装node-js的方法：" class="headerlink" title="linux云服务器安装node.js的方法："></a>linux云服务器安装node.js的方法：</h2><h3 id="1、登录服务器下载node-js-一般安装在local中"><a href="#1、登录服务器下载node-js-一般安装在local中" class="headerlink" title="1、登录服务器下载node.js(一般安装在local中)"></a>1、登录服务器下载node.js(一般安装在local中)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">wget https://nodejs.org/dist/v18.14.0/node-v18.14.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="2、执行以下命令，解压安装包"><a href="#2、执行以下命令，解压安装包" class="headerlink" title="2、执行以下命令，解压安装包"></a>2、执行以下命令，解压安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf node-v18.14.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="3、解压完之后删除压缩包，并且给解压后的包重命名"><a href="#3、解压完之后删除压缩包，并且给解压后的包重命名" class="headerlink" title="3、解压完之后删除压缩包，并且给解压后的包重命名"></a>3、解压完之后删除压缩包，并且给解压后的包重命名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf node-v18.14.0-linux-x64.tar.xz</span><br><span class="line">mv mv node-v18.14.0-linux-x64 nodejs</span><br></pre></td></tr></table></figure>

<h3 id="4、依次执行以下命令，创建软链接"><a href="#4、依次执行以下命令，创建软链接" class="headerlink" title="4、依次执行以下命令，创建软链接"></a>4、依次执行以下命令，创建软链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/nodejs/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm</span><br><span class="line">ln -s /usr/local/nodejs/bin/npx /usr/local/bin/npx</span><br></pre></td></tr></table></figure>

<h3 id="5、依次执行以下命令，查看-Node-js、npm、npx-版本信息"><a href="#5、依次执行以下命令，查看-Node-js、npm、npx-版本信息" class="headerlink" title="5、依次执行以下命令，查看 Node.js、npm、npx 版本信息"></a>5、依次执行以下命令，查看 Node.js、npm、npx 版本信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npx -v</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>纯css实现的几种箭头</title>
    <url>/2018/04/01/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%AD%E5%A4%B4/</url>
    <content><![CDATA[<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h5 id="通过截取border-边框-的部分“拐角”实现"><a href="#通过截取border-边框-的部分“拐角”实现" class="headerlink" title="通过截取border(边框)的部分“拐角”实现"></a>通过截取border(边框)的部分“拐角”实现</h5><hr>
<h3 id="一个梯形"><a href="#一个梯形" class="headerlink" title="一个梯形"></a>一个梯形</h3><h5 id="当元素宽、高和边框的宽相近（等）时，改变某一边的颜色可以看到一个梯形"><a href="#当元素宽、高和边框的宽相近（等）时，改变某一边的颜色可以看到一个梯形" class="headerlink" title="当元素宽、高和边框的宽相近（等）时，改变某一边的颜色可以看到一个梯形:"></a>当元素宽、高和边框的宽相近（等）时，改变某一边的颜色可以看到一个梯形:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;demo1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo1</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left-color</span>: <span class="number">#f00</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="一个三角形-实心箭头"><a href="#一个三角形-实心箭头" class="headerlink" title="一个三角形(实心箭头)"></a>一个三角形(实心箭头)</h3><h5 id="当元素宽、高为零，且其他边为透明颜色时，可以形一个三角形"><a href="#当元素宽、高为零，且其他边为透明颜色时，可以形一个三角形" class="headerlink" title="当元素宽、高为零，且其他边为透明颜色时，可以形一个三角形:"></a>当元素宽、高为零，且其他边为透明颜色时，可以形一个三角形:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;demo2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo2</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left-color</span>: <span class="number">#f00</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="任意角度的三角形-实心箭头"><a href="#任意角度的三角形-实心箭头" class="headerlink" title="任意角度的三角形(实心箭头)"></a>任意角度的三角形(实心箭头)</h3><h5 id="改变各个边的宽度，即通过调整“边框”厚度可以配置出任意角度"><a href="#改变各个边的宽度，即通过调整“边框”厚度可以配置出任意角度" class="headerlink" title="改变各个边的宽度，即通过调整“边框”厚度可以配置出任意角度:"></a>改变各个边的宽度，即通过调整“边框”厚度可以配置出任意角度:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;demo3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo3</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left</span>: <span class="number">20px</span> solid <span class="number">#f00</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="通过伪元素实现-实心箭头"><a href="#通过伪元素实现-实心箭头" class="headerlink" title="通过伪元素实现(实心箭头)"></a>通过伪元素实现(实心箭头)</h3><h5 id="三角形可以通过伪元素绘制出，而无需改变原来的DOM结构"><a href="#三角形可以通过伪元素绘制出，而无需改变原来的DOM结构" class="headerlink" title="三角形可以通过伪元素绘制出，而无需改变原来的DOM结构:"></a>三角形可以通过伪元素绘制出，而无需改变原来的DOM结构:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span id=<span class="string">&quot;demo4&quot;</span>&gt;文字内容&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo4</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo4</span><span class="selector-pseudo">:after</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#f00</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="伪元素实现三角线箭头"><a href="#伪元素实现三角线箭头" class="headerlink" title="伪元素实现三角线箭头"></a>伪元素实现三角线箭头</h3><h5 id="通过伪元素绘制出的两个，一个与背景色相同覆盖部分红色箭头，形成三角线"><a href="#通过伪元素绘制出的两个，一个与背景色相同覆盖部分红色箭头，形成三角线" class="headerlink" title="通过伪元素绘制出的两个，一个与背景色相同覆盖部分红色箭头，形成三角线:"></a>通过伪元素绘制出的两个，一个与背景色相同覆盖部分红色箭头，形成三角线:</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span id=<span class="string">&quot;demo5&quot;</span>&gt;文字内容&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo5</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo5</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#demo5</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">right</span>: -<span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo5</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left-color</span>: <span class="number">#f00</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">right</span>: -<span class="number">21px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="三角线分割的Tab页"><a href="#三角线分割的Tab页" class="headerlink" title="三角线分割的Tab页"></a>三角线分割的Tab页</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;demo6&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>文字内容 Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>文字内容 Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>文字内容 Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo6</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo6</span> <span class="selector-tag">li</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">list-style</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">12px</span> -<span class="number">19px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-bottom</span>: solid <span class="number">1px</span> <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-left</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo6</span> <span class="selector-tag">li</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#demo6</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">right</span>: -<span class="number">18px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo6</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left-color</span>: <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">right</span>: -<span class="number">19px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="这里还有另一种效果，使用三角形跟矩形组合成提示框"><a href="#这里还有另一种效果，使用三角形跟矩形组合成提示框" class="headerlink" title="这里还有另一种效果，使用三角形跟矩形组合成提示框"></a>这里还有另一种效果，使用三角形跟矩形组合成提示框</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;demo7&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo7</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#333</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo7</span><span class="selector-pseudo">:after</span>, <span class="selector-id">#demo7</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: solid transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">left</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo7</span><span class="selector-pseudo">:after</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-width</span>: <span class="number">9px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left-color</span>: <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#demo7</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-width</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-left-color</span>: <span class="number">#333</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>箭头</tag>
      </tags>
  </entry>
  <entry>
    <title>获取URL中参数的方法</title>
    <url>/2017/12/02/%E8%8E%B7%E5%8F%96URL%E4%B8%AD%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="在开发中，时常会用到javascript来获取当前页面的url网址信息，在这里是我的一些获取url信息的小总结。"><a href="#在开发中，时常会用到javascript来获取当前页面的url网址信息，在这里是我的一些获取url信息的小总结。" class="headerlink" title="在开发中，时常会用到javascript来获取当前页面的url网址信息，在这里是我的一些获取url信息的小总结。"></a>在开发中，时常会用到javascript来获取当前页面的url网址信息，在这里是我的一些获取url信息的小总结。</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><h6 id="正则法-1"><a href="#正则法-1" class="headerlink" title="正则法(1)"></a>正则法(1)</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(<span class="string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    var r = window.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != null) &#123;</span><br><span class="line">        <span class="keyword">return</span> unescape(r[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这样调用：</span><br><span class="line">alert(GetQueryString(<span class="string">&quot;参数名1&quot;</span>));</span><br><span class="line">alert(GetQueryString(<span class="string">&quot;参数名2&quot;</span>));</span><br><span class="line">alert(GetQueryString(<span class="string">&quot;参数名3&quot;</span>));</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h6 id="正则法-2"><a href="#正则法-2" class="headerlink" title="正则法(2)"></a>正则法(2)</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function GetQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(<span class="string">&quot;(^|&amp;)&quot;</span> + name + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    var r = window.location.search.substr(<span class="number">1</span>).match(reg);  //获取url中<span class="string">&quot;?&quot;</span>符后的字符串并正则匹配</span><br><span class="line">    var context = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (r != null)</span><br><span class="line">         context = r[<span class="number">2</span>];</span><br><span class="line">    reg = null;</span><br><span class="line">    r = null;</span><br><span class="line">    <span class="keyword">return</span> context == null || context == <span class="string">&quot;&quot;</span> || context == <span class="string">&quot;undefined&quot;</span> ? <span class="string">&quot;&quot;</span> : context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(GetQueryString(<span class="string">&quot;q&quot;</span>));</span><br></pre></td></tr></table></figure>


<h5 id="方法二：split拆分法"><a href="#方法二：split拆分法" class="headerlink" title="方法二：split拆分法"></a>方法二：split拆分法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function GetRequest() &#123;</span><br><span class="line">    var url = location.search; //获取url中<span class="string">&quot;?&quot;</span>符后的字串</span><br><span class="line">    var theRequest = new Object();</span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;?&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        var <span class="built_in">str</span> = url.substr(<span class="number">1</span>);</span><br><span class="line">        strs = <span class="built_in">str</span>.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; strs.length; i ++) &#123;</span><br><span class="line">            theRequest[strs[i].split(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>]] = unescape(strs[i].split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> theRequest;</span><br><span class="line">&#125;</span><br><span class="line">var Request = new Object();</span><br><span class="line">Request = GetRequest();</span><br><span class="line"></span><br><span class="line">// var 参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,参数N;</span><br><span class="line">// 参数<span class="number">1</span> = Request[<span class="string">&#x27;参数1&#x27;</span>];</span><br><span class="line">// 参数<span class="number">2</span> = Request[<span class="string">&#x27;参数2&#x27;</span>];</span><br><span class="line">// 参数<span class="number">3</span> = Request[<span class="string">&#x27;参数3&#x27;</span>];</span><br><span class="line">// 参数N = Request[<span class="string">&#x27;参数N&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h5 id="方法三：单个参数的获取方法"><a href="#方法三：单个参数的获取方法" class="headerlink" title="方法三：单个参数的获取方法"></a>方法三：单个参数的获取方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function GetRequest() &#123;</span><br><span class="line">   var url = location.search; //获取url中<span class="string">&quot;?&quot;</span>符后的字串</span><br><span class="line">   <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;?&quot;</span>) != -<span class="number">1</span>) &#123;    //判断是否有参数</span><br><span class="line">      var <span class="built_in">str</span> = url.substr(<span class="number">1</span>); //从第一个字符开始 因为第<span class="number">0</span>个是?号 获取所有除问号的所有符串</span><br><span class="line">      strs = <span class="built_in">str</span>.split(<span class="string">&quot;=&quot;</span>);   //用等号进行分隔 （因为知道只有一个参数 所以直接用等号进分隔 如果有多个参数 要用&amp;号分隔 再用等号进行分隔）</span><br><span class="line">      alert(strs[<span class="number">1</span>]);          //直接弹出第一个参数 （如果有多个参数 还要进行循环的）</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>页面等待动画loading.js</title>
    <url>/2017/12/03/%E9%A1%B5%E9%9D%A2%E7%AD%89%E5%BE%85%E5%8A%A8%E7%94%BBloading-js/</url>
    <content><![CDATA[<h4 id="loading-js的内容（依赖jq"><a href="#loading-js的内容（依赖jq" class="headerlink" title="loading.js的内容（依赖jq)"></a>loading.js的内容（依赖jq)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">  $.extend(&#123;</span><br><span class="line">    openLoad : function(url)&#123;</span><br><span class="line">      <span class="keyword">if</span> ($(<span class="string">&quot;#load-dialog&quot;</span>).html() != null) &#123;</span><br><span class="line">          $(<span class="string">&quot;#load-dialog&quot;</span>).show();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          var load_dialog = <span class="string">&#x27;&lt;div id=&quot;load-dialog&quot;&gt;&lt;div style=&quot;background: #000;position: absolute;top:0;left:0;z-index: 1000;width: 100%;height:100%;opacity: 0.6;overflow: hidden;&quot;&gt;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">              <span class="string">&#x27;&lt;img style=&quot;position: absolute;top:50%;left:50%;z-index: 1001;width: 16px;height: 16px;&quot;&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">          $(<span class="string">&#x27;body&#x27;</span>).append(load_dialog);</span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">&#x27;#load-dialog div&#x27;</span>).css(<span class="string">&quot;top&quot;</span>,$(window).scrollTop());</span><br><span class="line">      $(<span class="string">&#x27;#load-dialog img&#x27;</span>).css(<span class="string">&quot;top&quot;</span>,$(window).scrollTop()+$(window).height()/<span class="number">2</span>).attr(<span class="string">&quot;src&quot;</span>,url);</span><br><span class="line">      $(<span class="string">&#x27;body,html&#x27;</span>).css(<span class="string">&quot;overflow&quot;</span>,<span class="string">&quot;hidden&quot;</span>).css(<span class="string">&quot;height&quot;</span>,<span class="string">&quot;100%&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    closeLoad : function()&#123;</span><br><span class="line">      $(<span class="string">&quot;#load-dialog&quot;</span>).hide();</span><br><span class="line">      $(<span class="string">&#x27;body,html&#x27;</span>).css(<span class="string">&quot;overflow&quot;</span>,<span class="string">&quot;auto&quot;</span>).css(<span class="string">&quot;height&quot;</span>,<span class="string">&quot;auto&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用方法:</span><br><span class="line">        开 $.openLoad(<span class="string">&#x27;/images/loading.gif&#x27;</span>);</span><br><span class="line">        关 $.closeLoad();</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>loading</tag>
      </tags>
  </entry>
</search>
